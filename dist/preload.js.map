{"version":3,"file":"preload.js","sources":["../src/common/ipcevents.ts","../src/preload/ipc.ts","../src/common/util.ts","../src/preload/index.ts"],"sourcesContent":["// Main\r\nexport const MAIN_EVENT = \"pccompat-main-event\";\r\nexport const COMPILE_SASS = \"pccompat-compile-sass\";\r\nexport const COMPILE_JSX = \"pccompat-compile-jsx\";\r\nexport const GET_APP_PATH = \"pccompat-get-app-path\";\r\nexport const SET_DEV_TOOLS = \"pccompat-open-devtools\";\r\n\r\n// Preload\r\nexport const EXPOSE_PROCESS_GLOBAL = \"pccompat-expose-process-global\";","import {ipcRenderer} from \"electron\";\r\nimport * as IPCEvents from \"../common/ipcevents\";\r\n\r\nexport const events = {};\r\n\r\nconst IPC = {\r\n    on(event: string, callback: Function) {\r\n        if (!events[event]) events[event] = new Set();\r\n\r\n        return events[event].add(callback), IPC.off.bind(null, event, callback);\r\n    },\r\n    off(event: string, callback: Function) {\r\n        if (!events[event]) return;\r\n\r\n        events[event].delete(callback);\r\n    },\r\n    once(event: string, callback: Function) {\r\n        const unsubscribe = IPC.on(event, (...args) => {\r\n            unsubscribe();\r\n            return callback(...args);\r\n        });\r\n    },\r\n    dispatch(event: string, ...args: any[]) {\r\n        if (!events[event]) return;\r\n\r\n        for (const callback of events[event]) {\r\n            try {callback(...args);}\r\n            catch (error) {console.error(error);}\r\n        }\r\n    },\r\n    sendMain(event: string, ...args: any[]) {\r\n        return ipcRenderer.sendSync(IPCEvents.MAIN_EVENT, event, ...args);\r\n    }\r\n};\r\n\r\nexport default IPC;","export function getKeys(object: object) {\r\n    const keys = [];\r\n\r\n    for (const key in object) keys.push(key);\r\n\r\n    return keys;\r\n};\r\n\r\nexport function cloneObject(target: any, newObject = {}, keys?: string[]) {\r\n    if (!Array.isArray(keys)) keys = getKeys(target);\r\n    \r\n    return keys.reduce((clone, key) => {\r\n        if (typeof (target[key]) === \"object\" && !Array.isArray(target[key]) && target[key] !== null) clone[key] = cloneObject(target[key], {});\r\n        else if (typeof target[key] === \"function\") clone[key] = target[key].bind(target);\r\n        else clone[key] = target[key];\r\n\r\n        return clone;\r\n    }, newObject);\r\n};","import IPC, {events} from \"./ipc\";\r\nimport {contextBridge, ipcRenderer, webFrame} from \"electron\";\r\nimport {cloneObject, getKeys} from \"../common/util\";\r\nimport Module from \"module\";\r\nimport path from \"path\";\r\nimport * as IPCEvents from \"../common/ipcevents\";\r\n\r\nconst nodeModulesPath = path.resolve(process.cwd(), \"resources\", \"app-original.asar\", \"node_modules\");\r\n// @ts-ignore - Push modules\r\nif (!Module.globalPaths.includes(nodeModulesPath)) Module.globalPaths.push(nodeModulesPath);\r\n\r\nconst API = {\r\n    getAppPath() {\r\n        return ipcRenderer.sendSync(IPCEvents.GET_APP_PATH);\r\n    },\r\n    getBasePath() {\r\n        return path.resolve(__dirname, \"..\");\r\n    },\r\n    executeJS(js: string) {\r\n        return eval(js);\r\n    },\r\n    setDevtools(opened: boolean) {\r\n        return ipcRenderer.invoke(IPCEvents.SET_DEV_TOOLS, opened);\r\n    },\r\n    IPC: IPC\r\n};\r\n\r\n// Expose Native bindings and cloned process global.\r\nObject.defineProperties(window, {\r\n    PCCompatNative: {\r\n        value: Object.assign({}, API, {cloneObject, getKeys}),\r\n        configurable: false,\r\n        writable: false\r\n    },\r\n    PCCompatEvents: {\r\n        value: events,\r\n        configurable: false,\r\n        writable: false\r\n    }\r\n});\r\n\r\ncontextBridge.exposeInMainWorld(\"PCCompatNative\", API);\r\n\r\nIPC.on(IPCEvents.EXPOSE_PROCESS_GLOBAL, () => {\r\n    try {\r\n        if (!process.contextIsolated) {\r\n            Object.defineProperty(window, \"process\", {\r\n                value: cloneObject(process),\r\n                configurable: true\r\n            });\r\n        } else {\r\n            contextBridge.exposeInMainWorld(\"process\", cloneObject(process));\r\n        }\r\n    } catch (error) {\r\n        error.name = \"NativeError\";\r\n        console.error(\"Failed to expose process global:\", error);\r\n    }\r\n});"],"names":["MAIN_EVENT","GET_APP_PATH","SET_DEV_TOOLS","EXPOSE_PROCESS_GLOBAL","events","IPC","on","event","callback","Set","add","off","bind","delete","once","unsubscribe","args","dispatch","error","console","sendMain","ipcRenderer","sendSync","IPCEvents","getKeys","object","keys","key","push","cloneObject","target","newObject","Array","isArray","reduce","clone","nodeModulesPath","path","resolve","process","cwd","Module","globalPaths","includes","API","getAppPath","getBasePath","__dirname","executeJS","js","eval","setDevtools","opened","invoke","Object","defineProperties","window","PCCompatNative","value","assign","configurable","writable","PCCompatEvents","contextBridge","exposeInMainWorld","contextIsolated","defineProperty","name"],"mappings":"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"}