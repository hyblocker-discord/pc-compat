var __webpack_modules__={475:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": () => (/* binding */ renderer)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/util.ts\nvar util_namespaceObject = {};\n__webpack_require__.r(util_namespaceObject);\n__webpack_require__.d(util_namespaceObject, {\n  "findInReactTree": () => (findInReactTree),\n  "findInTree": () => (findInTree),\n  "forceUpdateElement": () => (forceUpdateElement),\n  "formatTime": () => (formatTime),\n  "getOwnerInstance": () => (getOwnerInstance),\n  "getReactInstance": () => (getReactInstance),\n  "injectContextMenu": () => (injectContextMenu),\n  "sleep": () => (sleep),\n  "waitFor": () => (waitFor),\n  "wrapInHooks": () => (wrapInHooks)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/modules/utilities.ts\nvar utilities_namespaceObject = {};\n__webpack_require__.r(utilities_namespaceObject);\n__webpack_require__.d(utilities_namespaceObject, {\n  "createUpdateWrapper": () => (createUpdateWrapper),\n  "getProps": () => (getProps),\n  "joinClassNames": () => (joinClassNames),\n  "matchAll": () => (matchAll),\n  "omit": () => (omit),\n  "random": () => (random),\n  "setProps": () => (setProps),\n  "sleep": () => (utilities_sleep),\n  "testJSON": () => (testJSON),\n  "uuid": () => (uuid)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/modal.ts\nvar modal_namespaceObject = {};\n__webpack_require__.r(modal_namespaceObject);\n__webpack_require__.d(modal_namespaceObject, {\n  "ModalContext": () => (ModalContext),\n  "close": () => (modal_close),\n  "closeAll": () => (closeAll),\n  "open": () => (modal_open)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/components/icons/index.ts\nvar icons_namespaceObject = {};\n__webpack_require__.r(icons_namespaceObject);\n__webpack_require__.d(icons_namespaceObject, {\n  "Bin": () => (Bin),\n  "Bulb": () => (Bulb),\n  "Chemistry": () => (Chemistry),\n  "Clear": () => (Clear),\n  "Close": () => (Close),\n  "CloudDownload": () => (CloudDownload),\n  "CloudUpload": () => (CloudUpload),\n  "CodeBraces": () => (CodeBraces),\n  "Copy": () => (Copy),\n  "Discord": () => (Discord),\n  "ExternalLink": () => (ExternalLink),\n  "FontAwesome": () => (FontAwesome),\n  "Gear": () => (Gear),\n  "GitHub": () => (GitHub),\n  "ImportExport": () => (ImportExport),\n  "Info": () => (Info),\n  "Key": () => (Key),\n  "Keyboard": () => (Keyboard),\n  "Overflow": () => (Overflow),\n  "Person": () => (Person),\n  "PersonShield": () => (PersonShield),\n  "Pin": () => (Pin),\n  "Plugin": () => (Plugin),\n  "Receipt": () => (Receipt),\n  "ReportFlag": () => (ReportFlag),\n  "Scale": () => (Scale),\n  "Search": () => (Search),\n  "Server": () => (Server),\n  "Spotify": () => (Spotify),\n  "Sync": () => (Sync),\n  "Tag": () => (Tag),\n  "Theme": () => (Theme),\n  "ThumbsDown": () => (ThumbsDown),\n  "ThumbsUp": () => (ThumbsUp),\n  "Unlink": () => (Unlink),\n  "Unpin": () => (Unpin),\n  "Verified": () => (Verified),\n  "VerifiedBadge": () => (VerifiedBadge)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/api/settings.ts\nvar api_settings_namespaceObject = {};\n__webpack_require__.r(api_settings_namespaceObject);\n__webpack_require__.d(api_settings_namespaceObject, {\n  "_fluxProps": () => (_fluxProps),\n  "connectStores": () => (connectStores),\n  "registerSettings": () => (registerSettings),\n  "settings": () => (settings),\n  "store": () => (store),\n  "tabs": () => (tabs),\n  "unregisterSettings": () => (unregisterSettings)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/entities.ts\nvar entities_namespaceObject = {};\n__webpack_require__.r(entities_namespaceObject);\n__webpack_require__.d(entities_namespaceObject, {\n  "Plugin": () => (plugin_Plugin),\n  "Theme": () => (theme_Theme)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/api/commands.ts\nvar commands_namespaceObject = {};\n__webpack_require__.r(commands_namespaceObject);\n__webpack_require__.d(commands_namespaceObject, {\n  "commands": () => (commands),\n  "handleCommand": () => (handleCommand),\n  "initialize": () => (initialize),\n  "registerCommand": () => (registerCommand),\n  "section": () => (section),\n  "unregisterCommand": () => (unregisterCommand)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/api/i18n.ts\nvar i18n_namespaceObject = {};\n__webpack_require__.r(i18n_namespaceObject);\n__webpack_require__.d(i18n_namespaceObject, {\n  "injectStrings": () => (injectStrings),\n  "loadAllStrings": () => (loadAllStrings),\n  "loadStrings": () => (loadStrings),\n  "locale": () => (locale),\n  "messages": () => (messages)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/api/notices.ts\nvar api_notices_namespaceObject = {};\n__webpack_require__.r(api_notices_namespaceObject);\n__webpack_require__.d(api_notices_namespaceObject, {\n  "closeAnnouncement": () => (closeAnnouncement),\n  "closeToast": () => (closeToast),\n  "sendAnnouncement": () => (sendAnnouncement),\n  "sendToast": () => (sendToast)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/api/connections.ts\nvar connections_namespaceObject = {};\n__webpack_require__.r(connections_namespaceObject);\n__webpack_require__.d(connections_namespaceObject, {\n  "connections": () => (connections),\n  "fetchAccounts": () => (fetchAccounts),\n  "filter": () => (filter),\n  "get": () => (get),\n  "map": () => (map),\n  "registerConnection": () => (registerConnection),\n  "unregisterConnection": () => (unregisterConnection)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/api/index.ts\nvar api_namespaceObject = {};\n__webpack_require__.r(api_namespaceObject);\n__webpack_require__.d(api_namespaceObject, {\n  "commands": () => (commands_namespaceObject),\n  "connections": () => (connections_namespaceObject),\n  "i18n": () => (i18n_namespaceObject),\n  "notices": () => (api_notices_namespaceObject),\n  "settings": () => (api_settings_namespaceObject)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/node/https.ts\nvar https_namespaceObject = {};\n__webpack_require__.r(https_namespaceObject);\n__webpack_require__.d(https_namespaceObject, {\n  "createServer": () => (createServer),\n  "get": () => (https_get),\n  "request": () => (request)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/node/http.ts\nvar http_namespaceObject = {};\n__webpack_require__.r(http_namespaceObject);\n__webpack_require__.d(http_namespaceObject, {\n  "createServer": () => (http_createServer),\n  "get": () => (http_get),\n  "request": () => (http_request)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/compilers/index.ts\nvar compilers_namespaceObject = {};\n__webpack_require__.r(compilers_namespaceObject);\n__webpack_require__.d(compilers_namespaceObject, {\n  "JSX": () => (JSXCompiler),\n  "SASS": () => (SASS)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/powercord/index.ts\nvar powercord_namespaceObject = {};\n__webpack_require__.r(powercord_namespaceObject);\n__webpack_require__.d(powercord_namespaceObject, {\n  "account": () => (account),\n  "api": () => (api_namespaceObject),\n  "compilers": () => (compilers_namespaceObject),\n  "components": () => (powercord_components),\n  "constants": () => (powercord_constants),\n  "entities": () => (entities_namespaceObject),\n  "fetchAccount": () => (fetchAccount),\n  "http": () => (http),\n  "initialized": () => (initialized),\n  "injector": () => (powercord_injector),\n  "modal": () => (modal_namespaceObject),\n  "once": () => (once),\n  "pluginManager": () => (PluginManager),\n  "styleManager": () => (StyleManager),\n  "toggleDeveloper": () => (toggleDeveloper),\n  "util": () => (util_namespaceObject),\n  "webpack": () => (powercord_webpack)\n});\n\n// NAMESPACE OBJECT: ./src/renderer/modules/index.ts\nvar renderer_modules_namespaceObject = {};\n__webpack_require__.r(renderer_modules_namespaceObject);\n__webpack_require__.d(renderer_modules_namespaceObject, {\n  "ComponentPatcher": () => (componentpatcher),\n  "DOM": () => (DOM),\n  "DataStore": () => (datastore),\n  "DiscordModules": () => (discord),\n  "Logger": () => (logger),\n  "Patcher": () => (Patcher),\n  "Utilities": () => (utilities_namespaceObject),\n  "Webpack": () => (webpack),\n  "memoize": () => (memoize)\n});\n\n;// CONCATENATED MODULE: ./src/renderer/data/modules.ts\n/* harmony default export */ const modules = ({Constants:{props:["API_HOST","ActionTypes"]},React:{props:["createElement","isValidElement"]},ReactDOM:{props:["render","createPortal"]},ReactSpring:{props:["useSpring","Controller","animated"]},Flux:{type:"MERGE",props:[["Store","Dispatcher"],["connectStores"]]},Dispatcher:{props:["dirtyDispatch"]},ContextMenuActions:{props:["openContextMenu"]},ModalsApi:{props:["openModal","useModalsStore"]},ModalStack:{props:["push","popAll"]},LocaleManager:{props:["Messages","getAvailableLocales"],ensure:mod=>mod.Messages.CLOSE},LocaleStore:{props:["locale","theme"]},Lodash:{props:["zipObjectDeep"]},MessageCreators:{props:["createBotMessage"]},MessageActions:{props:["receiveMessage"]},AvatarDefaults:{props:["BOT_AVATARS"]},Moment:{props:["momentProperties"]},SelectedChannelStore:{props:["_dispatchToken","getChannelId","getLastSelectedChannelId"]},ModalComponents:{props:["ModalRoot","ModalHeader"]},Link:{name:"Anchor"},Switch:{name:"Switch"},SwitchItem:{name:"SwitchItem"},TextInput:{name:"TextInput"},TextArea:{name:"TextArea"},SelectInput:{name:"SelectTempWrapper"},Tooltips:{props:["TooltipContainer"],rename:[{from:"default",to:"Tooltip"},{from:"TooltipContainer",to:"Container"},{from:"TooltipColors",to:"Colors"},{from:"TooltipPositions",to:"Positions"},{from:"TooltipLayer",to:"Layer"},]},Button:{props:["BorderColors","Colors"]},Slider:{name:"Slider"},ConfirmationModal:{name:"ConfirmModal"},Text:{name:"Text"},Markdown:{name:"Markdown",props:["rules"]},Caret:{name:"Caret"},Forms:{props:["FormItem","FormTitle"]},Flex:{name:"Flex"},SearchBar:{name:"SearchBar"},Spinner:{name:"Spinner"},Scrollers:{props:["ScrollerAuto","ScrollerThin","default"]},Popout:{name:"Popout"},Margins:{props:["marginXLarge"]},FormClasses:{props:["formText","description"]},ContextMenu:{type:"MERGE",props:[["openContextMenu"],["MenuItem","MenuControlItem"]],rename:[{from:"default",to:"Menu"},{from:"MenuItem",to:"Item"},{from:"MenuGroup",to:"Group"},{from:"MenuCheckboxItem",to:"CheckboxItem"},{from:"MenuSeparator",to:"Separator"},{from:"MenuCheckboxItem",to:"CheckboxItem"},{from:"MenuRadioItem",to:"RadioItem"},{from:"MenuStyle",to:"Style"},{from:"MenuControlItem",to:"ControlItem"},{from:"openContextMenu",to:"open"},{from:"closeContextMenu",to:"close"},]},PlaceholderClasses:{props:["emptyStateImage","emptyStateSubtext"]}});\n;// CONCATENATED MODULE: ./src/renderer/data/constants.ts\nconst FONTAWESOME_BASEURL="https://kit-pro.fontawesome.com/releases/v5.15.2/css/pro.min.css";const MONACO_BASEURL="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.20.0/min"\n;// CONCATENATED MODULE: ./src/renderer/data/index.ts\n\n;// CONCATENATED MODULE: ./src/renderer/modules/webpack.ts\nif(typeof Array.prototype.at!=="function"){Array.prototype.at=function(index){return index<0?this[this.length-Math.abs(index)]:this[index]}}if(typeof setImmediate==="undefined"){window.setImmediate=callback=>setTimeout(callback,0)}class Filters{static byProps(...props){return module=>props.every(prop=>prop in module)}static byDisplayName(name,def=false){return module=>(def?module=module.default:module)&& typeof module==="function"&&module.displayName===name}static byTypeString(...strings){return module=>module.type&&(module=module.type?.toString())&&strings.every(str=>module.indexOf(str)> -1)}}class WebpackModule{#listeners=new Set();get Filters(){return Filters}get chunkName(){return"webpackChunkdiscord_app"}get id(){return Symbol("pc-compat")}constructor(){this.cache=null;this.whenReady=this.waitForGlobal.then(()=>new Promise(async onReady=>{const[Dispatcher,{ActionTypes}={},UserStore]=await this.findByProps(["dirtyDispatch"],["API_HOST","ActionTypes"],["getCurrentUser","_dispatchToken"],{cache:false,bulk:true,wait:true,forever:true});if(UserStore.getCurrentUser())return onReady();const listener=function(){Dispatcher.unsubscribe(ActionTypes.START_SESSION,listener);Dispatcher.unsubscribe(ActionTypes.CONNECTION_OPEN,listener);onReady()};Dispatcher.subscribe(ActionTypes.START_SESSION,listener);Dispatcher.subscribe(ActionTypes.CONNECTION_OPEN,listener)}));this.whenReady.then(()=>{let originalPush=window[this.chunkName].push;const handlePush=chunk=>{const[,modules]=chunk;for(const moduleId in modules){const originalModule=modules[moduleId];modules[moduleId]=(...args)=>{const[,exports]=args;originalModule.apply(originalModule,args);const listeners=[...this.#listeners];for(let i=0;i<listeners.length;i++){try{listeners[i](exports)}catch(error){console.error("[Webpack]","Could not fire callback listener:",error)}}};Object.assign(modules[moduleId],originalModule,{toString:originalModule.toString.bind(originalModule),__original:originalModule})}return originalPush.apply(window[this.chunkName],[chunk])};Object.defineProperty(window[this.chunkName],"push",{configurable:true,get:()=>handlePush,set:newPush=>{originalPush=newPush}})})}addListener(listener){this.#listeners.add(listener);return()=>{this.#listeners.delete(listener)}}removeListener(listener){return this.#listeners.delete(listener)}findLazy(filter){const fromCache=this.findModule(filter);if(fromCache)return Promise.resolve(fromCache);return new Promise(resolve=>{const listener=m=>{const directMatch=filter(m);if(directMatch){resolve(m);return void remove()}if(!m.default)return;const defaultMatch=filter(m.default);if(!defaultMatch)return;resolve(m.default);remove()};const remove=this.addListener(listener)})}async waitFor(filter,{retries=100,all=false,forever=false,delay=50}={}){for(let i=0;i<retries||forever;i++){const module=this.findModule(filter,{all,cache:false});if(module)return module;await new Promise(res=>setTimeout(res,delay))}}parseOptions(args,filter=thing=>typeof thing==="object"&&thing!=null&&!Array.isArray(thing)){return[args,filter(args.at(-1))?args.pop():{}]}request(cache=true){if(this.cache)return this.cache;if(Array.isArray(window[this.chunkName])){const chunk=[[this.id],{},__nested_webpack_require_3203__=>__nested_webpack_require_3203__];this.cache=window[this.chunkName].push(chunk);window[this.chunkName].splice(window[this.chunkName].indexOf(chunk),1)}return this.cache}findModule(filter,{all=false,cache=true,force=false,default:defaultExports=false}={}){if(typeof filter!=="function")return void 0;const __nested_webpack_require_3516__=this.request(cache);const found=[];let hasError=null;if(!__nested_webpack_require_3516__)return;const wrapFilter=function(module,index){try{return filter(module,index)}catch(error){hasError??=error;return false}};for(const id in __nested_webpack_require_3516__.c){const module=__nested_webpack_require_3516__.c[id].exports;if(!module||module===window)continue;switch(typeof module){case"object":{if(wrapFilter(module,id)){if(!all)return module;found.push(module)}if(module.__esModule&&module.default!=null&& typeof module.default!=="number"&&wrapFilter(module.default,id)){const exports=defaultExports?module:module.default;if(!all)return exports;found.push(exports)}if(force&&module.__esModule)for(const key in module){if(!module[key])continue;if(wrapFilter(module[key],id)){if(!all)return module[key];found.push(module[key])}}break}case"function":{if(wrapFilter(module,id)){if(!all)return module;found.push(module)}break}}}if(hasError){setImmediate(()=>{console.warn("[Webpack] filter threw an error. This can cause lag spikes at the user\'s end. Please fix asap.\\n\\n",hasError)})}return all?found:found[0]}findModules(filter){return this.findModule(filter,{all:true})}bulk(...options){const[filters,{wait=false,...rest}]=this.parseOptions(options);const found=new Array(filters.length);const searchFunction=wait?this.waitFor:this.findModule;const wrappedFilters=filters.map(filter=>{if(Array.isArray(filter))filter=Filters.byProps(...filter);if(typeof filter==="string")filter=Filters.byDisplayName(filter);return m=>{try{return filter(m)}catch(error){return false}}});const returnValue=searchFunction.call(this,module=>{for(let i=0;i<wrappedFilters.length;i++){const filter=wrappedFilters[i];if(typeof filter!=="function"||!filter(module)||found[i]!=null)continue;found[i]=module}return found.filter(String).length===filters.length},rest);if(wait)return returnValue.then(()=>found);return found}findByProps(...options){const[props,{bulk=false,wait=false,...rest}]=this.parseOptions(options);if(!bulk&&!wait){return this.findModule(Filters.byProps(...props),rest)}if(wait&&!bulk){return this.waitFor(Filters.byProps(...props),rest)}if(bulk){const filters=props.map(propsArray=>Filters.byProps(...propsArray)).concat({wait,...rest});return this.bulk(...filters)}return null}findByDisplayName(...options){const[displayNames,{bulk=false,wait=false,...rest}]=this.parseOptions(options);if(!bulk&&!wait){return this.findModule(Filters.byDisplayName(displayNames[0]),rest)}if(wait&&!bulk){return this.waitFor(Filters.byDisplayName(displayNames[0]),rest)}if(bulk){const filters=displayNames.map(filters.map(Filters.byDisplayName)).concat({wait,cache});return this.bulk(...filters)}return null}findIndex(filter){let foundIndex=-1;this.findModule((module,index)=>{if(filter(module))foundIndex=index});return foundIndex}atIndex(index){return this.request(true)?.c[index]}get waitForGlobal(){return new Promise(async onExists=>{while(!Array.isArray(window[this.chunkName])){await new Promise(setImmediate)}onExists()})}async wait(callback=null){return this.whenReady.then(()=>{typeof callback==="function"&&callback()})}get whenExists(){return this.waitForGlobal}on(event,listener){switch(event){case"LOADED":return this.whenReady.then(listener)}}get once(){return this.on}}const Webpack=new WebpackModule;/* harmony default export */ const webpack = (Webpack);\n;// CONCATENATED MODULE: ./src/renderer/modules/logger.ts\nclass Logger{constructor(name,shouldCache=false){this.module=name;if(shouldCache)Logger.cache.set(name,this)} #parseType(type){switch(type){case"info":case"warn":case"error":case"debug":return type;default:return"log"}} #log(type1,...message){console[this.#parseType(type1)](`%c[Powercord:${this.module}]%c`,"color: #7289da; font-weight: 700;","",...message)}log(...message1){this.#log("log",...message1)}info(...message2){this.#log("info",...message2)}warn(...message3){this.#log("warn",...message3)}error(...message4){this.#log("error",...message4)}debug(...message5){this.#log("debug",...message5)}static create(name){return new Logger(name)}static getLogger(name){return this.cache.get(name)}}Logger.cache=new Map();/* harmony default export */ const logger = (Logger);\n;// CONCATENATED MODULE: ./src/renderer/modules/patcher.ts\nconst patcher_Logger=logger.create("Patcher");class Patcher{static getPatchesByCaller(id){if(!id)return[];const patches=[];for(const patch of this._patches)for(const childPatch of patch.children)if(childPatch.caller===id)patches.push(childPatch);return patches}static unpatchAll(caller){const patches=this.getPatchesByCaller(caller);if(!patches.length)return;for(const patch of patches)patch.unpatch()}static makeOverride(patch){return function(){let returnValue,args=arguments;if(!patch?.children?.length)return patch.originalFunction.apply(this,arguments);for(const beforePatch of patch.children.filter(e=>e.type==="before")){try{const tempArgs=beforePatch.callback(this,args,patch.originalFunction.bind(this));if(Array.isArray(tempArgs))args=tempArgs}catch(error){patcher_Logger.error(`Could not fire before patch for ${patch.functionName} of ${beforePatch.caller}`,error)}}const insteadPatches=patch.children.filter(e=>e.type==="instead");if(!insteadPatches.length)returnValue=patch.originalFunction.apply(this,args);else for(const insteadPatch of insteadPatches){try{const tempReturn=insteadPatch.callback(this,args,patch.originalFunction.bind(this));if(typeof tempReturn!=="undefined")returnValue=tempReturn}catch(error){patcher_Logger.error(`Could not fire instead patch for ${patch.functionName} of ${insteadPatch.caller}`,error)}}for(const afterPatch of patch.children.filter(e=>e.type==="after")){try{const tempReturn=afterPatch.callback(this,args,returnValue,ret=>returnValue=ret);if(typeof tempReturn!=="undefined")returnValue=tempReturn}catch(error){patcher_Logger.error(`Could not fire after patch for ${patch.functionName} of ${afterPatch.caller}`,error)}}return returnValue}}static pushPatch(caller,module,functionName){const patch={caller,module,functionName,originalFunction:module[functionName],undo:()=>{patch.module[patch.functionName]=patch.originalFunction;patch.children=[]},count:0,children:[]};module[functionName]=this.makeOverride(patch);module[`__powercordOriginal_${functionName}`]=patch.originalFunction;Object.assign(module[functionName],patch.originalFunction,{toString:()=>patch.originalFunction.toString(),__originalFunction:patch.originalFunction});return this._patches.push(patch),patch}static doPatch(caller,module,functionName,callback,type="after",options={}){let{displayName}=options;const patch=this._patches.find(e=>e.module===module&&e.functionName===functionName)??this.pushPatch(caller,module,functionName);if(typeof displayName!=="string")displayName||module.displayName||module.name||module.constructor.displayName||module.constructor.name;const child={caller,type,id:patch.count,callback,unpatch:()=>{patch.children.splice(patch.children.findIndex(cpatch=>cpatch.id===child.id&&cpatch.type===type),1);if(patch.children.length<=0){const patchNum=this._patches.findIndex(p=>p.module==module&&p.functionName==functionName);this._patches[patchNum].undo();this._patches.splice(patchNum,1)}}};patch.children.push(child);patch.count++;return child.unpatch}static before(caller,module,functionName,callback){return this.doPatch(caller,module,functionName,callback,"before")}static after(caller,module,functionName,callback){return this.doPatch(caller,module,functionName,callback,"after")}static instead(caller,module,functionName,callback){return this.doPatch(caller,module,functionName,callback,"instead")}}Patcher._patches=[];\n;// CONCATENATED MODULE: ./src/renderer/modules/discord.ts\nconst DiscordModules={};const NOOP_RET=_=>_;const filters=new Promise(resolve=>{const result=[];for(let moduleId in modules){const module=modules[moduleId];let filter=NOOP_RET,map=null;if(Array.isArray(module.props)){switch(module.type){case"MERGE":{let found=[];filter=m=>{const matches=module.props.some(props=>props.every(prop=>prop in m));if(matches)found.push(m);return matches};map=()=>{return Object.assign({},...found)};break}default:{filter=m=>module.props.every(prop=>prop in m)}}}if(module.rename){const current=map??NOOP_RET;map=mod=>{mod=current(mod);const cloned={...mod};for(const{from,to}of module.rename){cloned[to]=mod[from];delete cloned[from]}return cloned}}if(module.name){const current=filter;filter=mod=>mod.displayName===module.name&&current(mod)}if(typeof module.ensure==="function"){const current=filter;filter=mod=>current(mod)&&module.ensure(mod)}if(typeof filter!=="function")continue;result.push({filter,map,id:moduleId})}resolve(result)});const promise=Promise.all([filters,webpack.whenReady]).then(([filters1])=>{const result=webpack.bulk(...filters1.map(({filter})=>filter));Object.assign(DiscordModules,filters1.reduce((modules,{id,map},index)=>{const mapper=map??NOOP_RET;const res=mapper(result[index]);modules[id]=res;if(id==\'React\')Object.defineProperty(window,\'React\',{value:res,configurable:true,writable:true});return modules},{}))});/* harmony default export */ const discord = (DiscordModules);\n;// CONCATENATED MODULE: ./src/renderer/modules/events.ts\nconst Events=new EventTarget();/* harmony default export */ const events = (Events);\n;// CONCATENATED MODULE: ./src/renderer/powercord/util.ts\nconst util_Logger=logger.create("Utilities");const sleep=time=>new Promise(f=>setTimeout(f,time));function formatTime(time){time=Math.floor(time/1e3);const hours=Math.floor(time/3600)%24;const minutes=Math.floor(time/60)%60;const seconds=time%60;return[hours,minutes,seconds].map(v=>v<10?`0${v}`:v).filter((v,i)=>v!=="00"||i>0).join(":")}function findInTree(tree={},filter=_=>_,{ignore=[],walkable=[],maxProperties=100}={}){let stack=[tree];const wrapFilter=function(...args){try{return Reflect.apply(filter,this,args)}catch{return false}};while(stack.length&&maxProperties){const node=stack.shift();if(wrapFilter(node))return node;if(Array.isArray(node))stack.push(...node);else if(typeof node==="object"&&node!==null){if(walkable.length){for(const key in node){const value=node[key];if(~walkable.indexOf(key)&&!~ignore.indexOf(key)){stack.push(value)}}}else{for(const key in node){const value=node[key];if(node&& ~ignore.indexOf(key))continue;stack.push(value)}}}maxProperties--}}function findInReactTree(tree,filter,options={}){return findInTree(tree,filter,{...options,walkable:["props","children"]})}function getReactInstance(node){return node["__reactFiber$"]}function getOwnerInstance(node,filter=_=>true){if(!node)return null;const fiber=getReactInstance(node);let current=fiber;const matches=function(){const isInstanceOf=current?.stateNode instanceof discord.React.Component;return isInstanceOf&&filter(current?.stateNode)};while(!matches()){current=current?.return}return current?.stateNode??null}function forceUpdateElement(selector){getOwnerInstance(document.querySelector(selector))?.forceUpdate()}async function waitFor(selector){let element=document.querySelector(selector);do{await sleep(1)}while(!(element=document.querySelector(selector)))return element}const overrides={useMemo:factory=>factory(),useState:initialState=>[initialState,()=>void 0],useReducer:initialValue=>[initialValue,()=>void 0],useEffect:()=>{},useLayoutEffect:()=>{},useRef:()=>({current:null}),useCallback:callback=>callback};const keys=Object.keys(overrides);function wrapInHooks(functionalComponent){return(...args)=>{const ReactDispatcher=React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher.current;const originals=keys.map(e=>[e,ReactDispatcher[e]]);Object.assign(ReactDispatcher,overrides);let returnValue=null,error=null;try{returnValue=functionalComponent()}catch(err){error=err}Object.assign(ReactDispatcher,Object.fromEntries(originals));if(error)throw error;return returnValue}}const menuPatches={};promise.then(()=>{const ContextMenu=webpack.findByProps("openContextMenuLazy");Patcher.before("pc-context-menu-opener",ContextMenu,"openContextMenuLazy",(_1,args1,res1)=>{const old=args1[1];args1[1]=async()=>{const render=await old(args1[0]);return props=>{const res2=render(props);const wrapped=typeof res2.type==="object"?res2.props.children:res2;const displayName=wrapped?.type?.displayName;const collection=menuPatches[displayName];const patches=collection?.filter(p=>!p.applied);if(displayName&&patches?.length){const Menu=webpack.findModule(m=>m.default?.displayName===displayName);for(const patch of patches){const Patch=Patcher[patch.before?\'before\':\'after\'].bind(Patcher);Patch(patch.id,Menu,"default",(_,...args)=>{return patch.func.apply(_,args)});patch.applied=true}delete menuPatches[displayName]}else if(!displayName){const rendered=wrapInHooks(wrapped.type)(wrapped.props);const displayName=rendered?.props?.children?.type?.displayName;const collection=menuPatches[displayName];const patches=collection?.filter(p=>!p.applied);const AnalyticsContext=webpack.findModule(m=>[m.default,m.__powercordOriginal_default].includes(wrapped.type));for(const patch of patches??[]){Patcher.after(patch.id,AnalyticsContext,"default",(_,args2,res3)=>{const menu=res3.props.children.type;patch.memo??=function(...args){if(patch.before){return menu.apply(this,[patch.func.apply(this,[args])])}const res=menu.apply(this,args);try{return patch.func.apply(this,[args,res])}catch(e){util_Logger.error(`Failed to run context menu injection with id ${patch.id}`,e);return res}};res3.props.children.type=patch.memo;return res3});patch.applied=true}delete menuPatches[displayName];wrapped.type=AnalyticsContext.default}return res2}};return args1});events.addEventListener("reload-core",()=>{Patcher.unpatchAll("pc-context-menu-opener");for(const menu of Object.keys(menuPatches)){const items=menuPatches[menu];items.map(e=>Patcher.unpatchAll(e.id))}})});function injectContextMenu(id,name,func,before=false){menuPatches[name]??=[];menuPatches[name].push({id,name,func,before})}\n;// CONCATENATED MODULE: ./src/renderer/flux/forceupdate.ts\nfunction createForceUpdate(){const refs=new Set();const forceUpdate1=function(){for(const ref of[...refs]){try{ref()}catch(error){console.error(error)}}};function useForceUpdate(){const[,forceUpdate]=discord.React.useReducer(n=>!n,false);discord.React.useEffect(()=>{refs.add(forceUpdate);return refs.delete.bind(refs,forceUpdate)},[])}return[forceUpdate1,useForceUpdate]}\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/asynccomponent.tsx\nfunction _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function AsyncComponent({_provider,_fallback,...props}){const[Component,setComponent]=discord.React.useState(()=>_fallback??(()=>null));discord.React.useEffect(()=>{_provider().then(comp=>setComponent(()=>comp))},[_provider,_fallback]);return React.createElement(Component,_extends({},props))};function from(promise,fallback){const[forceUpdate,useForceUpdate]=createForceUpdate();const value={resolved:false,component:null};promise.then(component=>{Object.assign(value,{component,resolved:true});forceUpdate()});return props=>{useForceUpdate();if(value.resolved)return React.createElement(value.component,props);return discord.React.createElement(AsyncComponent,{_provider:()=>promise,_fallback:fallback,...props})}}const fromPromise=from;function fromDisplayName(displayName,fallback){return from(webpack.findByDisplayName(displayName,{wait:true}),fallback)}Object.assign(AsyncComponent,{from,fromDisplayName})\n;// CONCATENATED MODULE: ./src/renderer/modules/componentpatcher.tsx\nfunction componentpatcher_extends(){componentpatcher_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return componentpatcher_extends.apply(this,arguments)}const componentpatcher_Logger=new logger("ComponentPatcher");const patchAvatars=function(){const Avatar=webpack.findByProps("AnimatedAvatar");Patcher.after("pc-utility-classes-avatar",Avatar,"default",(_,args,res)=>{if(args[0]?.src?.includes("/avatars")){res.props["data-user-id"]=args[0].src.match(/\\/(?:avatars|users)\\/(\\d+)/)?.[1]}return res});Patcher.after("pc-utility-classes-animated-avatar",Avatar.AnimatedAvatar,"type",(_,args,res)=>{return React.createElement(Avatar.default,componentpatcher_extends({},res.props))});const AvatarWrapper=webpack.findByProps("wrapper","avatar")?.wrapper?.split(" ")?.[0];setImmediate(()=>forceUpdateElement(`.${AvatarWrapper}`))};const injectMessageName=function(){const Message=webpack.findModule(m=>m?.toString()?.indexOf("childrenSystemMessage")> -1);if(!Message)return componentpatcher_Logger.warn("Message Component was not found!");Message.displayName="Message"};const injectAsyncFlux=function(){const Flux=webpack.findByProps("connectStores");Flux.connectStoresAsync=function(stores1,factory){return Component=>fromPromise(Promise.all(stores1).then(stores=>{return Flux.connectStores(stores,props=>factory(stores,props))(Component)}))}};/* harmony default export */ const componentpatcher = (promise.then(()=>{patchAvatars();injectMessageName();injectAsyncFlux();events.addEventListener("reload-core",()=>{Patcher.unpatchAll("pc-utility-classes-animated-avatar");Patcher.unpatchAll("pc-utility-classes-avatar")})}));\n;// CONCATENATED MODULE: ./src/renderer/classes/store.ts\nclass Store{has(event){return event in this.events}on(event,listener){if(!this.has(event))this.events[event]=new Set();this.events[event].add(listener);return()=>void this.off(event,listener)}off(event,listener){if(!this.has(event))return;return this.events[event].delete(listener)}emit(event,...args){if(!this.has(event))return;const toFire=[...this.events[event]];for(let index=0;index<toFire.length;index++){const listener=toFire[index];try{listener(...args)}catch(error){this.logger.error(`Store:${this.constructor.name}`,error)}}}useEvent(event,factory,validate=()=>true){const[state,setState]=discord.React.useState(factory());discord.React.useEffect(()=>{return this.on(event,(...args)=>validate(...args)&&setState(factory()))},[event,factory]);return state}constructor(){this.logger=new logger("Store");this.events={}}}\n;// CONCATENATED MODULE: ./src/renderer/classes/staticemitter.ts\nconst staticemitter_Logger=logger.create("EventEmitter");class Emitter{static has(event){return event in this.events}static on(event,listener){if(!this.has(event))this.events[event]=new Set();this.events[event].add(listener);return this.off.bind(this,event,listener)}static off(event,listener){if(!this.has(event))return;return this.events[event].delete(listener)}static emit(event,...args){if(!this.has(event))return;for(const listener of this.events[event]){try{listener(...args)}catch(error){staticemitter_Logger.error(`Store:${this.constructor.name}`,"Could not fire callback:",error)}}}}Emitter.events={};\n;// CONCATENATED MODULE: ./src/renderer/classes/index.ts\n\n;// CONCATENATED MODULE: ./src/renderer/modules/memoize.ts\nfunction memoize(target,key,value){Object.defineProperty(target,key,{value:value,configurable:true});return value}\n;// CONCATENATED MODULE: ./src/renderer/node/fs.ts\n/* harmony default export */ const fs = (window.process?.contextIsolated??true?class fs{static readFileSync(path,options="utf8"){return PCCompatNative.executeJS(`require("fs").readFileSync(${JSON.stringify(path)}, ${JSON.stringify(options)});`)}static writeFileSync(path,data,options){return PCCompatNative.executeJS(`require("fs").writeFileSync(${JSON.stringify(path)}, ${JSON.stringify(data)}, ${JSON.stringify(options)})`)}static writeFile(path,data,options,callback){if(typeof options==="function"){callback=options;options=null}const ret={error:null};try{this.writeFileSync(path,data,options)}catch(error){ret.error=error}callback(ret.error)}static readdirSync(path,options){return PCCompatNative.executeJS(`require("fs").readdirSync(${JSON.stringify(path)}, ${JSON.stringify(options)});`)}static existsSync(path){return PCCompatNative.executeJS(`require("fs").existsSync(${JSON.stringify(path)});`)}static mkdirSync(path,options){return PCCompatNative.executeJS(`require("fs").mkdirSync(${JSON.stringify(path)}, ${JSON.stringify(options)});`)}static statSync(path,options){return PCCompatNative.executeJS(`\n            const stats = require("fs").statSync(${JSON.stringify(path)}, ${JSON.stringify(options)});\n            const ret = {\n                ...stats,\n                isFile: () => stats.isFile(),\n                isDirectory: () => stats.isDirectory()\n            };\n            ret\n        `)}static watch(path,options,callback){if(typeof options==="function"){callback=options;options=null}const eventId="bdcompat-watcher-"+Math.random().toString(36).slice(2,10);PCCompatNative.IPC.on(eventId,(event,filename)=>{callback(event,filename)});return PCCompatNative.executeJS(`\n            require("fs").watch(${JSON.stringify(path)}, ${JSON.stringify(options)}, (event, filename) => {\n                PCCompatNative.IPC.dispatch(${JSON.stringify(eventId)}, event, filename);\n            });\n        `)}static get promises(){const metas=PCCompatNative.executeJS(`\n            const fs = require("fs");\n            const keys = Object.keys(fs.promises);\n\n            keys.map(key => [\n                key,\n                fs.promises[key].toString(),\n                (...args) => fs.promises[key](...args)\n            ]);\n        `);const proxy=metas.reduce((final,[key,toString,pointer])=>{Object.defineProperty(final,key,{configurable:true,get(){return memoize(this,key,Object.assign(pointer,{toString:()=>toString}))}});return final},{});return memoize(this,"promises",proxy)}}:window.require("fs"));\n;// CONCATENATED MODULE: ./src/renderer/node/path.ts\nconst path=PCCompatNative.executeJS(`require("path")`);/* harmony default export */ const node_path = (path);\n;// CONCATENATED MODULE: ./src/renderer/powercord/data/components.ts\n/* harmony default export */ const components = ({SwitchItem:{updater:true,filter:"SwitchItem",settings:true},Button:{updater:false,filter:["DropdownSizes"],settings:false},FormNotice:{updater:false,filter:"FormNotice",settings:false},Card:{updater:false,filter:"Card",settings:false},Clickable:{updater:false,filter:"Clickable",settings:false},Spinner:{updater:false,filter:"Spinner",settings:false},FormTitle:{updater:false,filter:"FormTitle",settings:false},HeaderBar:{updater:false,filter:"HeaderBar",settings:false},TabBar:{updater:false,filter:"TabBar",settings:false},Text:{updater:false,filter:"Text",settings:false},Flex:{updater:false,filter:"Flex",settings:false},Tooltip:{updater:false,filter:["TooltipContainer"],prop:"TooltipContainer",settings:false},AdvancedScrollerThin:{updater:false,filter:["AdvancedScrollerThin"],prop:"AdvancedScrollerThin",settings:false},AdvancedScrollerAuto:{updater:false,filter:["AdvancedScrollerAuto"],prop:"AdvancedScrollerAuto",settings:false},AdvancedScrollerNone:{updater:false,filter:["AdvancedScrollerNone"],prop:"AdvancedScrollerNone",settings:false},Menu:{updater:false,filter:["MenuGroup"],rename:[{from:"default",to:"Menu"}],prop:["MenuCheckboxItem","MenuControlItem","MenuGroup","MenuItem","MenuRadioItem","MenuSeparator","MenuStyle"],settings:false}});\n;// CONCATENATED MODULE: ./src/renderer/modules/utilities.ts\nfunction utilities_sleep(time){return new Promise(resolve=>setTimeout(resolve,time))}function random(length=10){return Math.random().toString(36).slice(2,length+2)}function getProps(obj,path){if(!path)return obj;return path.split(".").reduce((value,key)=>value&&value[key],obj)}function setProps(object,path,value){if(!path)return object;const split=path.split(".");const prop=split.pop();let current=split.length?getProps(object,split.join(".")):object;if(!current)return object;current[prop]=value;return object}const createUpdateWrapper=(Component,valueProp="value",changeProp="onChange",valueProps="0",valueIndex=0)=>props=>{const[value1,setValue]=discord.React.useState(props[valueProp]);return discord.React.createElement(Component,{...props,[valueProp]:value1,[changeProp]:(...args)=>{const value=getProps(args,valueProps);if(typeof props[changeProp]==="function")props[changeProp](args[valueIndex]);setValue(value)}})};function omit(thing,...things){if(Array.isArray(thing)){return thing.reduce((clone,key)=>things.includes(key)?clone:clone.concat(key),[])}const clone1={};for(const key1 in thing){if(things.includes(key1))continue;clone1[key1]=thing[key1]}return clone1}function joinClassNames(...classNames){let className=[];for(const item of classNames){if(typeof item==="string"){className.push(item);continue}if(Array.isArray(item)){const[should,name]=item;if(!should)continue;className.push(name)}}return className.join(" ")}function matchAll(regex,input,parent=false){let matches,output=[];while(matches=regex.exec(input)){if(parent)output.push(matches);else{const[,...match]=matches;output.push(match)}}return output}function uuid(length=30){let uuid1="";do{const random1=Math.random()*16|0;uuid1+=(uuid1.length==12?4:uuid1.length==16?random1&3|8:random1).toString(16)}while(uuid1.length<length)return uuid1}const testJSON=function(json){try{return JSON.parse(json)}catch(error){return false}}\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/divider.tsx\n/* harmony default export */ const divider = (fromPromise(promise.then(()=>{const{Forms}=discord;return function Divider(){return React.createElement(Forms.FormDivider,{className:"pc-settings-divider"})}})));\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/settings/formitem.tsx\nconst FormItem=fromPromise(promise.then(()=>{const{Forms,Flex,FormClasses,Margins}=discord;return function FormItem({title,required,children,note,noteHasMargin}){const noteClasses=[FormClasses.description,noteHasMargin&&Margins.marginTop8].filter(Boolean).join(" ");return React.createElement(Forms.FormItem,{className:`${Flex.Direction.VERTICAL} ${Flex.Justify.START} ${Flex.Align.STRETCH} ${Flex.Wrap.NO_WRAP} ${Margins.marginBottom20}`,required:required,title:title},children,note&&React.createElement(Forms.FormText,{className:noteClasses},note),React.createElement(divider,null))}}));/* harmony default export */ const formitem = (FormItem);\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/settings/textinput.tsx\nfunction textinput_extends(){textinput_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return textinput_extends.apply(this,arguments)}function TextInput(props){const{TextInput:TextInput1}=discord;const{children:title,note,required}=props;delete props.children;return React.createElement(formitem,{title:title,note:note,required:required,noteHasMargin:true},React.createElement(TextInput1,textinput_extends({},props,{required:required})))}\n;// CONCATENATED MODULE: ./src/renderer/modules/components.ts\nclass Components{static #_cache={};static byProps(...props){const name=props.join(":");if(this.#_cache[name])return this.#_cache[name];this.#_cache[name]=webpack.findModule(m=>props.every(p=>p in m)&&("default"in m?true:typeof m==="function"));return this.#_cache[name]}static get(name,filter=_=>_){if(this.#_cache[name])return this.#_cache[name];this.#_cache[name]=webpack.findModule(m=>m.displayName===name&&filter(m));return this.#_cache[name]}}\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/settings/radiogroup.tsx\nfunction radiogroup_extends(){radiogroup_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return radiogroup_extends.apply(this,arguments)}function RadioGroup({children:title,note,required,...props}){const RadioGroup1=Components.get("RadioGroup");return React.createElement(formitem,{title:title,note:note,required:required},React.createElement(RadioGroup1,radiogroup_extends({},props)))}\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/settings/selectinput.tsx\nfunction selectinput_extends(){selectinput_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return selectinput_extends.apply(this,arguments)}function SelectInput(props){const{SelectInput:SelectInput1}=discord;const{children:title,note,required}=props;delete props.children;return React.createElement(formitem,{title:title,note:note,required:required,noteHasMargin:true},React.createElement(SelectInput1,selectinput_extends({},props,{required:required})))}\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/settings/category.tsx\n/* harmony default export */ const category = (fromPromise(promise.then(()=>{const{Forms,Text}=discord;const Caret=Components.get("Caret");return function Category({children,opened,onChange,name,description}){return React.createElement("div",{className:joinClassNames("pc-category",[opened,"pc-category-opened"])},React.createElement("div",{className:"pc-category-header",onClick:onChange},React.createElement("div",{className:"pc-category-details"},React.createElement(Forms.FormTitle,{color:Text.Colors.HEADER_PRIMARY,tag:Forms.FormTitle.Tags.H3,size:Text.Sizes.SIZE_16,className:"pc-category-details-title"},name),React.createElement(Forms.FormText,{color:Text.Colors.HEADER_SECONDARY,size:Text.Sizes.SIZE_14,className:"pc-category-details-description"},description)),React.createElement(Caret,{direction:opened?Caret.Directions.DOWN:Caret.Directions.RIGHT,className:"pc-category-caret"})),React.createElement("div",{className:`pc-category-content ${opened?\'pc-margin-top-20\':\'\'}`},opened&&children),!opened&&React.createElement(divider,null))}})));\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/settings/textareainput.tsx\nfunction textareainput_extends(){textareainput_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return textareainput_extends.apply(this,arguments)}const TextAreaInput=fromPromise(promise.then(()=>{const{TextArea}=discord;return function TextAreaInput(props){const{children:title,note,required}=props;delete props.children;return React.createElement(formitem,{title:title,note:note,required:required},React.createElement(TextArea,textareainput_extends({},props)))}}));/* harmony default export */ const textareainput = (TextAreaInput);\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icon.tsx\nconst Icon=fromPromise(promise.then(()=>{const Icons=webpack.findModules(m=>typeof m===\'function\'&&m.toString().indexOf(\'"currentColor"\')!== -1);function IconComponent(props){const mdl=Icons.find(i=>i.displayName===props.name);const Props=_.cloneDeep(props);delete Props.name;return React.createElement(mdl,Props)}Icon.Names=Icons.map(m=>m.displayName);return IconComponent}));/* harmony default export */ const components_icon = (Icon);\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/errorstate.tsx\nconst ErrorState=fromPromise(promise.then(()=>{const{Margins,Markdown}=discord;const{error,backgroundRed,icon,text}=webpack.findByProps(\'error\',\'backgroundRed\');return function ErrorState({children}){return React.createElement("div",{className:`${error} ${backgroundRed} ${Margins.marginBottom20}`},React.createElement(components_icon,{className:icon,name:"WarningCircle"}),React.createElement("div",{className:text},React.createElement(Markdown,null,children)))}}));/* harmony default export */ const errorstate = (ErrorState);\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/errorboundary.tsx\nconst ErrorBoundary=fromPromise(promise.then(()=>{return class ErrorBoundary extends discord.React.Component{static getDerivedStateFromError(error){return{hasError:true,error:error.message}}componentDidCatch(error,errorInfo){console.error(error,errorInfo)}render(){if(this.state.hasError){return React.createElement(errorstate,null,this.state.error)}return this.props.children}constructor(...args){super(...args);this.state={hasError:false,error:null}}}}));/* harmony default export */ const errorboundary = (ErrorBoundary);\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/settings/colorpicker.tsx\nfunction colorpicker_extends(){colorpicker_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return colorpicker_extends.apply(this,arguments)}const ColorPicker=fromPromise(webpack.whenReady.then(()=>{const LazyColorPicker=webpack.findByDisplayName("ColorPicker")??(()=>{try{const GuildFolderSettingsModal=webpack.findByDisplayName("GuildFolderSettingsModal");if(!GuildFolderSettingsModal)throw"GuildFolderSettingsModal was not found!";const rendered=GuildFolderSettingsModal.prototype.render.call({state:{},props:{}});const ColorPicker1=findInReactTree(rendered,e=>e?.props?.defaultColor!=null).type;if(typeof ColorPicker1!=="function")throw"ColorPicker could not be found!";return ColorPicker1}catch(error){logger.getLogger("Components")?.error("Failed to get ColorPicker component!",error);return()=>null}})();return props=>React.createElement(errorboundary,null,React.createElement(LazyColorPicker,colorpicker_extends({},props)))}));function ColorPickerInput(props){const{Constants:{DEFAULT_ROLE_COLOR,ROLE_COLORS}}=discord;const{children:title,note,required,default:defaultValue,defaultColors=ROLE_COLORS,value,disabled,onChange}=props;delete props.children;return React.createElement(formitem,{title:title,required:required,note:note},React.createElement(ColorPicker,{colors:defaultColors,defaultColor:typeof defaultValue==="number"?defaultValue:DEFAULT_ROLE_COLOR,onChange:onChange,disabled:disabled,value:value}))}/* harmony default export */ const colorpicker = (ColorPicker);\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/settings/slider.tsx\nfunction slider_extends(){slider_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return slider_extends.apply(this,arguments)}const SliderInput=fromPromise(promise.then(()=>{const{Slider}=discord;return function SliderInput(props){const{children:title,note,required}=props;delete props.children;return React.createElement(formitem,{title:title,note:note,required:required},React.createElement(Slider,slider_extends({},Object.assign({},props,{className:[props.className,"pc-margin-top-20"].filter(n=>n).join(" ")}))))}}));/* harmony default export */ const slider = (SliderInput);\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/settings/checkbox.tsx\nfunction checkbox_extends(){checkbox_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return checkbox_extends.apply(this,arguments)}function Checkbox({children:title,note,required,...props}){const Checkbox1=Components.get("Checkbox");return React.createElement(formitem,{title:title,note:note,required:required},React.createElement(Checkbox1,checkbox_extends({},props)))}\n;// CONCATENATED MODULE: ./src/renderer/powercord/modal.ts\nlet ModalContext=null;promise.then(()=>{ModalContext=discord.React.createContext(null)});function modal_open(Component){return discord.ModalsApi.openModal(props=>{return React.createElement(ModalContext.Provider,{value:props},React.createElement(Component,props))})}function modal_close(){const lastModal=discord.ModalsApi.useModalsStore.getState?.()?.default?.slice(-1)[0]?.key;if(!lastModal)return;discord.ModalsApi.closeModal(lastModal)}function closeAll(){discord.ModalsApi.closeAllModals()}\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/modal.ts\nconst Modal={};webpack.whenReady.then(()=>{const ModalComponents=webpack.findByProps("ModalRoot");const keys=omit(Object.keys(ModalComponents),"default","ModalRoot");const props1=Object.fromEntries(keys.map(key=>[key==="ModalSize"?"Sizes":key.slice("Modal".length),ModalComponents[key]]));const BindProps=ModalComponent=>props=>{const modalProps=React.useContext(ModalContext);return React.createElement(ModalComponent,Object.assign({},modalProps,props))};Object.assign(Modal,props1,{Confirm:Object.assign(BindProps(webpack.findByDisplayName("ConfirmModal")),{displayName:"PowercordModal"}),Modal:Object.assign(BindProps(ModalComponents.ModalRoot),{displayName:"PowercordModal"},props1)})});/* harmony default export */ const modal = (Modal);\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Bin.tsx\nfunction Bin_extends(){Bin_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Bin_extends.apply(this,arguments)}/* harmony default export */ const Bin = (props=>{return React.createElement("svg",Bin_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 25 21"},props),React.createElement("path",{fill:"currentColor",d:"M1.60772 16C1.60772 17.1 2.49904 18 3.58843 18H11.5112C12.6006 18 13.4919 17.1 13.4919 16V6C13.4919 4.9 12.6006 4 11.5112 4H3.58843C2.49904 4 1.60772 4.9 1.60772 6V16ZM4.74714 8.17C4.83876 8.0773 4.94759 8.00375 5.06739 7.95357C5.1872 7.90339 5.31563 7.87756 5.44534 7.87756C5.57504 7.87756 5.70347 7.90339 5.82328 7.95357C5.94309 8.00375 6.05191 8.0773 6.14354 8.17L7.54984 9.59L8.95614 8.17C9.04782 8.07742 9.15667 8.00398 9.27647 7.95387C9.39627 7.90377 9.52467 7.87798 9.65433 7.87798C9.784 7.87798 9.9124 7.90377 10.0322 7.95387C10.152 8.00398 10.2608 8.07742 10.3525 8.17C10.4442 8.26258 10.517 8.37249 10.5666 8.49346C10.6162 8.61442 10.6417 8.74407 10.6417 8.875C10.6417 9.00593 10.6162 9.13558 10.5666 9.25654C10.517 9.37751 10.4442 9.48742 10.3525 9.58L8.94623 11L10.3525 12.42C10.4442 12.5126 10.517 12.6225 10.5666 12.7435C10.6162 12.8644 10.6417 12.9941 10.6417 13.125C10.6417 13.2559 10.6162 13.3856 10.5666 13.5065C10.517 13.6275 10.4442 13.7374 10.3525 13.83C10.2608 13.9226 10.152 13.996 10.0322 14.0461C9.9124 14.0962 9.784 14.122 9.65433 14.122C9.52467 14.122 9.39627 14.0962 9.27647 14.0461C9.15667 13.996 9.04782 13.9226 8.95614 13.83L7.54984 12.41L6.14354 13.83C6.05185 13.9226 5.943 13.996 5.8232 14.0461C5.7034 14.0962 5.575 14.122 5.44534 14.122C5.31567 14.122 5.18727 14.0962 5.06747 14.0461C4.94768 13.996 4.83883 13.9226 4.74714 13.83C4.65545 13.7374 4.58272 13.6275 4.5331 13.5065C4.48348 13.3856 4.45794 13.2559 4.45794 13.125C4.45794 12.9941 4.48348 12.8644 4.5331 12.7435C4.58272 12.6225 4.65545 12.5126 4.74714 12.42L6.15344 11L4.74714 9.58C4.65533 9.48749 4.58249 9.3776 4.53279 9.25662C4.4831 9.13565 4.45752 9.00597 4.45752 8.875C4.45752 8.74403 4.4831 8.61435 4.53279 8.49338C4.58249 8.3724 4.65533 8.26251 4.74714 8.17ZM11.0161 1L10.3129 0.29C10.1347 0.11 9.87716 0 9.61967 0H5.48C5.22251 0 4.96502 0.11 4.78675 0.29L4.0836 1H1.60772C1.06303 1 0.617371 1.45 0.617371 2C0.617371 2.55 1.06303 3 1.60772 3H13.4919C14.0366 3 14.4823 2.55 14.4823 2C14.4823 1.45 14.0366 1 13.4919 1H11.0161Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Bulb.tsx\nfunction Bulb_extends(){Bulb_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Bulb_extends.apply(this,arguments)}/* harmony default export */ const Bulb = (props=>{return React.createElement("svg",Bulb_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",d:"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 1 1 7.072 0l-.548.547A3.374 3.374 0 0 0 14 18.469V19a2 2 0 1 1-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Chemistry.tsx\nfunction Chemistry_extends(){Chemistry_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Chemistry_extends.apply(this,arguments)}/* harmony default export */ const Chemistry = (props=>{return React.createElement("svg",Chemistry_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 640 1024"},props),React.createElement("path",{fill:"currentColor",d:"M618 971L448 769V416h21q14 0 23-9.5t9-23t-9-22.5t-23-9h-53q-13 0-22.5 9t-9.5 23v397q0 13 8 22l131 157H117l131-157q8-9 8-22V384q0-14-9.5-23t-22.5-9h-53q-14 0-23 9t-9 22.5t9 23t23 9.5h21v353L22 971q-14 15-6 34q4 9 12 14t17 5h550q20 0 28.5-19t-5.5-34zM288 320q26 0 45-19t19-45.5t-19-45t-45-18.5q-13 0-25 5t-20.5 13.5T229 231t-5 25q0 6 1 11.5t3 10.5t5 10t6.5 9t7.5 7.5t9 6.5t10 5t10.5 3t11.5 1zm208.5-95q46.5 0 79.5-33t33-79.5T576 33T496.5 0T417 33t-33 79.5t33 79.5t79.5 33zM496 64q10 0 19 3.5t15.5 10t10 15.5t3.5 19q0 20-14 34t-34 14q-13 0-24-6.5T454.5 136t-6.5-24q0-20 14-34t34-14z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Clear.tsx\nfunction Clear_extends(){Clear_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Clear_extends.apply(this,arguments)}/* harmony default export */ const Clear = (props=>{return React.createElement("svg",Clear_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 14 14"},props),React.createElement("path",{fill:"currentColor",d:"M7.02799 0.333252C3.346 0.333252 0.361328 3.31792 0.361328 6.99992C0.361328 10.6819 3.346 13.6666 7.02799 13.6666C10.71 13.6666 13.6947 10.6819 13.6947 6.99992C13.6947 3.31792 10.7093 0.333252 7.02799 0.333252ZM10.166 9.19525L9.22333 10.1379L7.02799 7.94325L4.83266 10.1379L3.89 9.19525L6.08466 6.99992L3.88933 4.80459L4.832 3.86259L7.02733 6.05792L9.22266 3.86259L10.1653 4.80459L7.97066 6.99992L10.166 9.19525Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Close.tsx\nfunction Close_extends(){Close_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Close_extends.apply(this,arguments)}/* harmony default export */ const Close = (props=>{return React.createElement("svg",Close_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 12 12"},props),React.createElement("g",{fill:"currentColor"},React.createElement("path",{d:"M9.5 3.205L8.795 2.5 6 5.295 3.205 2.5l-.705.705L5.295 6 2.5 8.795l.705.705L6 6.705 8.795 9.5l.705-.705L6.705 6"})))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/CloudDownload.tsx\nfunction CloudDownload_extends(){CloudDownload_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return CloudDownload_extends.apply(this,arguments)}/* harmony default export */ const CloudDownload = (props=>{return React.createElement("svg",CloudDownload_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 25 21"},props),React.createElement("path",{fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",d:"M8.59741 15.0117L12.5588 19.0117L16.5202 15.0117 M12.5588 10.0117V19.0117 M21.3531 16.1017C22.2141 15.4903 22.8598 14.6178 23.1965 13.6108C23.5331 12.6038 23.5432 11.5147 23.2253 10.5015C22.9074 9.48829 22.278 8.60374 21.4285 7.97621C20.5789 7.34869 19.5535 7.01082 18.5009 7.01165H17.2531C16.9552 5.83953 16.3979 4.7509 15.6231 3.82773C14.8482 2.90456 13.8761 2.17091 12.7798 1.68201C11.6836 1.1931 10.4918 0.961679 9.2941 1.00517C8.09645 1.04866 6.92417 1.36592 5.86552 1.93308C4.80688 2.50023 3.88944 3.3025 3.18229 4.27948C2.47514 5.25646 1.99671 6.3827 1.783 7.5734C1.56929 8.76411 1.62588 9.98825 1.9485 11.1537C2.27113 12.3191 2.85139 13.3954 3.64559 14.3017"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/CloudUpload.tsx\nfunction CloudUpload_extends(){CloudUpload_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return CloudUpload_extends.apply(this,arguments)}/* harmony default export */ const CloudUpload = (props=>{return React.createElement("svg",CloudUpload_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"none",d:"M0 0h24v24H0z"}),React.createElement("path",{fill:"currentColor",d:"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/CodeBraces.tsx\nfunction CodeBraces_extends(){CodeBraces_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return CodeBraces_extends.apply(this,arguments)}/* harmony default export */ const CodeBraces = (props=>{return React.createElement("svg",CodeBraces_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m-8 5H9v2c0 1.1-.9 2-2 2c1.1 0 2 .9 2 2v2h2v2H9c-1.1 0-2-.9-2-2v-1c0-1.1-.9-2-2-2v-2c1.1 0 2-.9 2-2V8c0-1.1.9-2 2-2h2v2m8 5c-1.1 0-2 .9-2 2v1c0 1.1-.9 2-2 2h-2v-2h2v-2c0-1.1.9-2 2-2c-1.1 0-2-.9-2-2V8h-2V6h2c1.1 0 2 .9 2 2v1c0 1.1.9 2 2 2v2z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Copy.tsx\nfunction Copy_extends(){Copy_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Copy_extends.apply(this,arguments)}/* harmony default export */ const Copy = (props=>{return React.createElement("svg",Copy_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("g",{fill:"currentColor"},React.createElement("path",{d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1z M15 5H8c-1.1 0-1.99.9-1.99 2L6 21c0 1.1.89 2 1.99 2H19c1.1 0 2-.9 2-2V11l-6-6zM8 21V7h6v5h5v9H8z"})))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Discord.tsx\nfunction Discord_extends(){Discord_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Discord_extends.apply(this,arguments)}/* harmony default export */ const Discord = (props=>{return React.createElement("svg",Discord_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 245 240"},props),React.createElement("g",{fill:"currentColor"},React.createElement("path",{d:"M104.4 103.9c-5.7 0-10.2 5-10.2 11.1s4.6 11.1 10.2 11.1c5.7 0 10.2-5 10.2-11.1.1-6.1-4.5-11.1-10.2-11.1zM140.9 103.9c-5.7 0-10.2 5-10.2 11.1s4.6 11.1 10.2 11.1c5.7 0 10.2-5 10.2-11.1s-4.5-11.1-10.2-11.1z"}),React.createElement("path",{d:"M189.5 20h-134C44.2 20 35 29.2 35 40.6v135.2c0 11.4 9.2 20.6 20.5 20.6h113.4l-5.3-18.5 12.8 11.9 12.1 11.2 21.5 19V40.6c0-11.4-9.2-20.6-20.5-20.6zm-38.6 130.6s-3.6-4.3-6.6-8.1c13.1-3.7 18.1-11.9 18.1-11.9-4.1 2.7-8 4.6-11.5 5.9-5 2.1-9.8 3.5-14.5 4.3-9.6 1.8-18.4 1.3-25.9-.1-5.7-1.1-10.6-2.7-14.7-4.3-2.3-.9-4.8-2-7.3-3.4-.3-.2-.6-.3-.9-.5-.2-.1-.3-.2-.4-.3-1.8-1-2.8-1.7-2.8-1.7s4.8 8 17.5 11.8c-3 3.8-6.7 8.3-6.7 8.3-22.1-.7-30.5-15.2-30.5-15.2 0-32.2 14.4-58.3 14.4-58.3 14.4-10.8 28.1-10.5 28.1-10.5l1 1.2c-18 5.2-26.3 13.1-26.3 13.1s2.2-1.2 5.9-2.9c10.7-4.7 19.2-6 22.7-6.3.6-.1 1.1-.2 1.7-.2 6.1-.8 13-1 20.2-.2 9.5 1.1 19.7 3.9 30.1 9.6 0 0-7.9-7.5-24.9-12.7l1.4-1.6s13.7-.3 28.1 10.5c0 0 14.4 26.1 14.4 58.3 0 0-8.5 14.5-30.6 15.2z"})))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/ExternalLink.tsx\nfunction ExternalLink_extends(){ExternalLink_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return ExternalLink_extends.apply(this,arguments)}/* harmony default export */ const ExternalLink = (props=>{return React.createElement("svg",ExternalLink_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M10 5V3H5.375C4.06519 3 3 4.06519 3 5.375V18.625C3 19.936 4.06519 21 5.375 21H18.625C19.936 21 21 19.936 21 18.625V14H19V19H5V5H10Z M21 2.99902H14V4.99902H17.586L9.29297 13.292L10.707 14.706L19 6.41302V9.99902H21V2.99902Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Gear.tsx\nfunction Gear_extends(){Gear_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Gear_extends.apply(this,arguments)}/* harmony default export */ const Gear = (props=>{return React.createElement("svg",Gear_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor","fill-rule":"evenodd","clip-rule":"evenodd",d:"M19.738 10H22V14H19.739C19.498 14.931 19.1 15.798 18.565 16.564L20 18L18 20L16.565 18.564C15.797 19.099 14.932 19.498 14 19.738V22H10V19.738C9.069 19.498 8.203 19.099 7.436 18.564L6 20L4 18L5.436 16.564C4.901 15.799 4.502 14.932 4.262 14H2V10H4.262C4.502 9.068 4.9 8.202 5.436 7.436L4 6L6 4L7.436 5.436C8.202 4.9 9.068 4.502 10 4.262V2H14V4.261C14.932 4.502 15.797 4.9 16.565 5.435L18 3.999L20 5.999L18.564 7.436C19.099 8.202 19.498 9.069 19.738 10ZM12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/GitHub.tsx\nfunction GitHub_extends(){GitHub_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return GitHub_extends.apply(this,arguments)}/* harmony default export */ const GitHub = (props=>{return React.createElement("svg",GitHub_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2px",d:"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/ImportExport.tsx\nfunction ImportExport_extends(){ImportExport_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return ImportExport_extends.apply(this,arguments)}/* harmony default export */ const ImportExport = (props=>{return React.createElement("svg",ImportExport_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M16 17.01V11c0-.55-.45-1-1-1s-1 .45-1 1v6.01h-1.79c-.45 0-.67.54-.35.85l2.79 2.78c.2.19.51.19.71 0l2.79-2.78c.32-.31.09-.85-.35-.85H16zM8.65 3.35L5.86 6.14c-.32.31-.1.85.35.85H8V13c0 .55.45 1 1 1s1-.45 1-1V6.99h1.79c.45 0 .67-.54.35-.85L9.35 3.35c-.19-.19-.51-.19-.7 0z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Info.tsx\nfunction Info_extends(){Info_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Info_extends.apply(this,arguments)}/* harmony default export */ const Info = (props=>{return React.createElement("svg",Info_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("g",{fill:"none","fill-rule":"evenodd"},React.createElement("rect",{width:"24",height:"24"}),React.createElement("path",{fill:"currentColor",d:"M9,7 L11,7 L11,5 L9,5 L9,7 Z M10,18 C5.59,18 2,14.41 2,10 C2,5.59 5.59,2 10,2 C14.41,2 18,5.59 18,10 C18,14.41 14.41,18 10,18 L10,18 Z M10,4.4408921e-16 C4.4771525,-1.77635684e-15 4.4408921e-16,4.4771525 0,10 C-1.33226763e-15,12.6521649 1.0535684,15.195704 2.92893219,17.0710678 C4.80429597,18.9464316 7.3478351,20 10,20 C12.6521649,20 15.195704,18.9464316 17.0710678,17.0710678 C18.9464316,15.195704 20,12.6521649 20,10 C20,7.3478351 18.9464316,4.80429597 17.0710678,2.92893219 C15.195704,1.0535684 12.6521649,2.22044605e-16 10,0 L10,4.4408921e-16 Z M9,15 L11,15 L11,9 L9,9 L9,15 L9,15 Z",transform:"translate(2 2)"})))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Key.tsx\nfunction Key_extends(){Key_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Key_extends.apply(this,arguments)}/* harmony default export */ const Key = (props=>{return React.createElement("svg",Key_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M12.65 10C11.83 7.67 9.61 6 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.61 0 4.83-1.67 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Keyboard.tsx\nfunction Keyboard_extends(){Keyboard_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Keyboard_extends.apply(this,arguments)}/* harmony default export */ const Keyboard = (props=>{return React.createElement("svg",Keyboard_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M20 5H4c-1.1 0-1.99.9-1.99 2L2 17c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-9 3h2v2h-2V8zm0 3h2v2h-2v-2zM8 8h2v2H8V8zm0 3h2v2H8v-2zm-1 2H5v-2h2v2zm0-3H5V8h2v2zm8 7H9c-.55 0-1-.45-1-1s.45-1 1-1h6c.55 0 1 .45 1 1s-.45 1-1 1zm1-4h-2v-2h2v2zm0-3h-2V8h2v2zm3 3h-2v-2h2v2zm0-3h-2V8h2v2z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Overflow.tsx\nfunction Overflow_extends(){Overflow_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Overflow_extends.apply(this,arguments)}/* harmony default export */ const Overflow = (props=>{return React.createElement("svg",Overflow_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M12 16c1.1045695 0 2 .8954305 2 2s-.8954305 2-2 2-2-.8954305-2-2 .8954305-2 2-2zm0-6c1.1045695 0 2 .8954305 2 2s-.8954305 2-2 2-2-.8954305-2-2 .8954305-2 2-2zm0-6c1.1045695 0 2 .8954305 2 2s-.8954305 2-2 2-2-.8954305-2-2 .8954305-2 2-2z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Person.tsx\nfunction Person_extends(){Person_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Person_extends.apply(this,arguments)}/* harmony default export */ const Person = (props=>{return React.createElement("svg",Person_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4s-4 1.79-4 4s1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/PersonShield.tsx\nfunction PersonShield_extends(){PersonShield_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return PersonShield_extends.apply(this,arguments)}/* harmony default export */ const PersonShield = (props=>{return React.createElement("svg",PersonShield_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 23"},props),React.createElement("g",{fill:"none","fill-rule":"evenodd"},React.createElement("path",{fill:"currentColor",d:"M19.487 5.126L10.487 0.126C10.184 -0.042 9.81798 -0.042 9.51498 0.126L0.514977 5.126C0.197977 5.302 0.000976562 5.636 0.000976562 5.999C0.000976562 6.693 0.114977 22.999 10.001 22.999C19.887 22.999 20.001 6.693 20.001 5.999C20.001 5.636 19.804 5.302 19.487 5.126ZM10.001 5.999C11.382 5.999 12.501 7.118 12.501 8.499C12.501 9.88 11.382 10.999 10.001 10.999C8.61998 10.999 7.50098 9.88 7.50098 8.499C7.50098 7.118 8.61998 5.999 10.001 5.999ZM6.25098 16C6.25098 13.699 7.69998 12.25 10.001 12.25C12.302 12.25 13.751 13.699 13.751 16H6.25098Z"})))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Pin.tsx\nfunction Pin_extends(){Pin_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Pin_extends.apply(this,arguments)}/* harmony default export */ const Pin = (props=>{return React.createElement("svg",Pin_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M19 3H5V5H7V12H5V14H11V22H13V14H19V12H17V5H19V3Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Plugin.tsx\nfunction Plugin_extends(){Plugin_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Plugin_extends.apply(this,arguments)}/* harmony default export */ const Plugin = (props=>{return React.createElement("svg",Plugin_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7s2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Receipt.tsx\nfunction Receipt_extends(){Receipt_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Receipt_extends.apply(this,arguments)}/* harmony default export */ const Receipt = (props=>{return React.createElement("svg",Receipt_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 18 20"},props),React.createElement("path",{fill:"currentColor",d:"M15 15H3V13H15Zm0-4H3V9H15Zm0-4H3V5H15ZM0 20l1.5-1.5L3 20l1.5-1.5L6 20l1.5-1.5L9 20l1.5-1.5L12 20l1.5-1.5L15 20l1.5-1.5L18 20V0L16.5 1.5 15 0 13.5 1.5 12 0 10.5 1.5 9 0 7.5 1.5 6 0 4.5 1.5 3 0 1.5 1.5 0 0Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/ReportFlag.tsx\nfunction ReportFlag_extends(){ReportFlag_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return ReportFlag_extends.apply(this,arguments)}/* harmony default export */ const ReportFlag = (props=>{return React.createElement("svg",ReportFlag_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M3 2.001h2v20H3zM20 6.002h-5v-3c0-.552-.447-1-1-1H7c-.553 0-1 .448-1 1v10c0 .552.447 1 1 1h5l-1.8 2.4c-.227.303-.265.708-.095 1.047.17.339.516.553.894.553h9c.553 0 1-.448 1-1v-10c.001-.552-.446-1-.999-1z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Scale.tsx\nfunction Scale_extends(){Scale_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Scale_extends.apply(this,arguments)}/* harmony default export */ const Scale = (props=>{return React.createElement("svg",Scale_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 48 48"},props),React.createElement("path",{fill:"currentColor",d:"M26 30C26 35.524 30.476 40 36 40C41.524 40 46 35.524 46 30H26Z M12 40C17.524 40 22 35.524 22 30H2C2 35.524 6.476 40 12 40Z M26 16V14H33.312L29.112 28H33.29L36 18.962L38.71 28H42.888L38.688 14H44V10H26V6H22V10H4V14H9.312L5.112 28H9.288L12 18.962L14.712 28H18.888L14.688 14H22V16H26Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Search.tsx\nfunction Search_extends(){Search_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Search_extends.apply(this,arguments)}/* harmony default export */ const Search = (props=>{return React.createElement("svg",Search_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M21.707 20.293L16.314 14.9C17.403 13.504 18 11.799 18 10C18 7.863 17.167 5.854 15.656 4.344C14.146 2.832 12.137 2 10 2C7.863 2 5.854 2.832 4.344 4.344C2.833 5.854 2 7.863 2 10C2 12.137 2.833 14.146 4.344 15.656C5.854 17.168 7.863 18 10 18C11.799 18 13.504 17.404 14.9 16.314L20.293 21.706L21.707 20.293ZM10 16C8.397 16 6.891 15.376 5.758 14.243C4.624 13.11 4 11.603 4 10C4 8.398 4.624 6.891 5.758 5.758C6.891 4.624 8.397 4 10 4C11.603 4 13.109 4.624 14.242 5.758C15.376 6.891 16 8.398 16 10C16 11.603 15.376 13.11 14.242 14.243C13.109 15.376 11.603 16 10 16Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Server.tsx\nfunction Server_extends(){Server_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Server_extends.apply(this,arguments)}/* harmony default export */ const Server = (props=>{return React.createElement("svg",Server_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M13 19h1a1 1 0 0 1 1 1h7v2h-7a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1H2v-2h7a1 1 0 0 1 1-1h1v-2H4a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1h16a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1h-7v2M4 3h16a1 1 0 0 1 1 1v4a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1m5 4h1V5H9v2m0 8h1v-2H9v2M5 5v2h2V5H5m0 8v2h2v-2H5z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Spotify.tsx\nfunction Spotify_extends(){Spotify_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Spotify_extends.apply(this,arguments)}/* harmony default export */ const Spotify = (props=>{return React.createElement("svg",Spotify_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16"},props),React.createElement("path",{fill:"currentColor",d:"M12.7609503,7.08043507 C10.1796226,5.54647845 5.92178025,5.40543597 3.45759439,6.15380317 C3.06179846,6.27398591 2.64333918,6.05046133 2.5234242,5.65450895 C2.40350922,5.25826952 2.62670026,4.83983073 3.02268744,4.71945662 C5.85139953,3.86028398 10.5538071,4.02620506 13.52548,5.79134121 C13.8813999,6.00280925 13.9981592,6.46277616 13.7872083,6.81834866 C13.5760661,7.17449528 13.1160095,7.2919031 12.7609503,7.08043507 Z M12.7456938,9.37785148 C12.5639139,9.67256952 12.1782795,9.76502256 11.883727,9.58404861 C9.72377106,8.25738585 6.4301382,7.87299604 3.87475822,8.64810544 C3.54335063,8.74813503 3.19341953,8.56150265 3.09273996,8.2309159 C2.99292418,7.89984962 3.17979084,7.55075308 3.51062257,7.45005215 C6.42975429,6.56484307 10.0587298,6.99354129 12.5395359,8.51700243 C12.8340884,8.69826409 12.9268019,9.08380478 12.7456938,9.37785148 Z M11.7108365,11.5428368 C11.566471,11.780912 11.2582675,11.8554793 11.0223905,11.7103962 C9.13604653,10.5509855 6.76173752,10.28918 3.96555508,10.9314428 C3.69610478,10.9935661 3.42751778,10.823788 3.36603055,10.5528184 C3.30435146,10.2819451 3.47260203,10.0118436 3.74262788,9.95000969 C6.80260111,9.2465882 9.42736749,9.54929481 11.5446963,10.8504123 C11.7807651,10.995399 11.8551061,11.3055334 11.7108365,11.5428368 Z M0,7.99990447 C0,12.4185663 3.58181579,16 8,16 C12.4183753,16 16,12.4185663 16,7.99990447 C16,3.58172026 12.4183753,0 8,0 C3.58181579,0 0,3.58172026 0,7.99990447 Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Sync.tsx\nfunction Sync_extends(){Sync_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Sync_extends.apply(this,arguments)}/* harmony default export */ const Sync = (props=>{return React.createElement("svg",Sync_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6c0 1.01-.25 1.97-.7 2.8l1.46 1.46A7.93 7.93 0 0 0 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6c0-1.01.25-1.97.7-2.8L5.24 7.74A7.93 7.93 0 0 0 4 12c0 4.42 3.58 8 8 8v3l4-4l-4-4v3z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Tag.tsx\nfunction Tag_extends(){Tag_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Tag_extends.apply(this,arguments)}/* harmony default export */ const Tag = (props=>{return React.createElement("svg",Tag_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M21.707 13.293l-11-11C10.519 2.105 10.266 2 10 2H3c-.553 0-1 .447-1 1v7c0 .266.105.519.293.707l11 11c.195.195.451.293.707.293s.512-.098.707-.293l7-7c.391-.391.391-1.023 0-1.414zM7 9c-1.106 0-2-.896-2-2 0-1.106.894-2 2-2 1.104 0 2 .894 2 2 0 1.104-.896 2-2 2z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Theme.tsx\nfunction Theme_extends(){Theme_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Theme_extends.apply(this,arguments)}/* harmony default export */ const Theme = (props=>{return React.createElement("svg",Theme_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M7 14c-1.66 0-3 1.34-3 3 0 1.31-1.16 2-2 2 .92 1.22 2.49 2 4 2 2.21 0 4-1.79 4-4 0-1.66-1.34-3-3-3zm13.71-9.37l-1.34-1.34c-.39-.39-1.02-.39-1.41 0L9 12.25 11.75 15l8.96-8.96c.39-.39.39-1.02 0-1.41z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/ThumbsDown.tsx\nfunction ThumbsDown_extends(){ThumbsDown_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return ThumbsDown_extends.apply(this,arguments)}/* harmony default export */ const ThumbsDown = (props=>{return React.createElement("svg",ThumbsDown_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 15 12"},props),React.createElement("path",{fill:"currentColor",d:"M9.33333 0H3.33333C2.78 0 2.30667 0.333333 2.10667 0.813333L0.0933333 5.51333C0.0333333 5.66667 0 5.82667 0 6V7.33333C0 8.06667 0.6 8.66667 1.33333 8.66667H5.54L4.90667 11.7133L4.88667 11.9267C4.88667 12.2 5 12.4533 5.18 12.6333L5.88667 13.3333L10.28 8.94C10.52 8.7 10.6667 8.36667 10.6667 8V1.33333C10.6667 0.6 10.0667 0 9.33333 0ZM12 0V8H14.6667V0H12Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/ThumbsUp.tsx\nfunction ThumbsUp_extends(){ThumbsUp_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return ThumbsUp_extends.apply(this,arguments)}/* harmony default export */ const ThumbsUp = (props=>{return React.createElement("svg",ThumbsUp_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 15 14"},props),React.createElement("path",{fill:"currentColor",d:"M0 13.3333H2.66667V5.33333H0V13.3333ZM14.6667 6C14.6667 5.26667 14.0667 4.66667 13.3333 4.66667H9.12667L9.76 1.62L9.78 1.40667C9.78 1.13333 9.66667 0.88 9.48667 0.7L8.78 0L4.39333 4.39333C4.14667 4.63333 4 4.96667 4 5.33333V12C4 12.7333 4.6 13.3333 5.33333 13.3333H11.3333C11.8867 13.3333 12.36 13 12.56 12.52L14.5733 7.82C14.6333 7.66667 14.6667 7.50667 14.6667 7.33333V6Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Unlink.tsx\nfunction Unlink_extends(){Unlink_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Unlink_extends.apply(this,arguments)}/* harmony default export */ const Unlink = (props=>{return React.createElement("svg",Unlink_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("path",{fill:"currentColor",d:"M21.94 11.23C21.57 8.76 19.32 7 16.82 7h-2.87c-.52 0-.95.43-.95.95s.43.95.95.95h2.9c1.6 0 3.04 1.14 3.22 2.73.17 1.43-.64 2.69-1.85 3.22l1.4 1.4c1.63-1.02 2.64-2.91 2.32-5.02zM4.12 3.56c-.39-.39-1.02-.39-1.41 0s-.39 1.02 0 1.41l2.4 2.4c-1.94.8-3.27 2.77-3.09 5.04C2.23 15.05 4.59 17 7.23 17h2.82c.52 0 .95-.43.95-.95s-.43-.95-.95-.95H7.16c-1.63 0-3.1-1.19-3.25-2.82-.15-1.72 1.11-3.17 2.75-3.35l2.1 2.1c-.43.09-.76.46-.76.92v.1c0 .52.43.95.95.95h1.78L13 15.27V17h1.73l3.3 3.3c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L4.12 3.56zM16 11.95c0-.52-.43-.95-.95-.95h-.66l1.49 1.49c.07-.13.12-.28.12-.44v-.1z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Unpin.tsx\nfunction Unpin_extends(){Unpin_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Unpin_extends.apply(this,arguments)}/* harmony default export */ const Unpin = (props=>{return React.createElement("svg",Unpin_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},props),React.createElement("g",{fill:"none",fillRule:"evenodd"},React.createElement("path",{fill:"#f04747",d:"M21.47,3.39,20.14,2.05,2.53,19.66,3.86,21l4.41-4.4,1.3-1.31,1.75-1.74,3.83-3.83Z"})),React.createElement("g",{fill:"none"},React.createElement("polygon",{points:"17 11.14 16.55 11.59 14.14 14 19 14 19 12 17 12 17 11.14",fill:"currentColor"}),React.createElement("polygon",{points:"16.91 3 5 3 5 5 7 5 7 12 5 12 5 14 5.91 14 16.91 3",fill:"currentColor"}),React.createElement("polygon",{points:"12.72 15.42 11 17.14 11 22 13 22 13 15.14 12.72 15.42",fill:"currentColor"})))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/Verified.tsx\nfunction Verified_extends(){Verified_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return Verified_extends.apply(this,arguments)}/* harmony default export */ const Verified = (props=>{return React.createElement("svg",Verified_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16"},props),React.createElement("path",{fill:"currentColor",d:"M14.5,5.6c-0.2-0.8,0.5-2,0-2.6C14,2.3,12.6,2.6,12,2.2s-0.8-1.9-1.5-2.1C9.8-0.1,8.8,0.9,8,0.9S6.3-0.2,5.5,0 C4.8,0.3,4.6,1.7,4,2.2S2,2.4,1.5,3c-0.4,0.6,0.2,1.9,0,2.6C1.3,6.3,0,6.9,0,7.6C0,8.4,1.3,9,1.5,9.7c0.2,0.8-0.5,2,0,2.6 C2,12.9,3.4,12.7,4,13.1s0.8,1.9,1.5,2.1c0.7,0.2,1.7-0.8,2.5-0.8s1.7,1,2.5,0.8s0.9-1.6,1.5-2.1s2-0.2,2.5-0.8 c0.4-0.6-0.2-1.9,0-2.6S16,8.4,16,7.6C16,6.9,14.7,6.3,14.5,5.6z M7.4,11.2L4,8.7l1-1.4l2,1.5L10.6,4L12,5L7.4,11.2z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/VerifiedBadge.tsx\nfunction VerifiedBadge_extends(){VerifiedBadge_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return VerifiedBadge_extends.apply(this,arguments)}/* harmony default export */ const VerifiedBadge = (props=>{return React.createElement("svg",VerifiedBadge_extends({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16"},props),React.createElement("path",{fill:"#4F545C",fillRule:"evenodd",clipRule:"evenodd",d:"M16 7.64528C16 8.43528 14.72 9.02528 14.48 9.73528C14.24 10.4453 14.92 11.7353 14.48 12.3253C14.04 12.9153 12.64 12.6753 12.02 13.1253C11.4 13.5753 11.23 14.9653 10.48 15.2153C9.73 15.4653 8.81 14.4153 8.01 14.4153C7.21 14.4153 6.26 15.4153 5.54 15.2153C4.82 15.0153 4.62 13.5753 4 13.1253C3.38 12.6753 2 12.9453 1.54 12.3253C1.08 11.7053 1.77 10.4853 1.54 9.73528C1.31 8.98528 0 8.43528 0 7.64528C0 6.85528 1.28 6.26528 1.52 5.55528C1.76 4.84528 1.08 3.55528 1.52 2.96528C1.96 2.37528 3.37 2.61528 4 2.16528C4.63 1.71528 4.78 0.325284 5.53 0.0452838C6.28 -0.234716 7.2 0.875284 8 0.875284C8.8 0.875284 9.75 -0.124716 10.47 0.0752838C11.19 0.275284 11.38 1.71528 12 2.16528C12.62 2.61528 14 2.34528 14.46 2.96528C14.92 3.58528 14.23 4.80528 14.46 5.55528C14.69 6.30528 16 6.85528 16 7.64528Z"}),React.createElement("path",{fill:"white",d:"M7.4 11.2153L4 8.66529L5 7.30529L7 8.83529L10.64 4.04529L12 5.04529L7.4 11.2153Z"}))});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/FontAwesome.tsx\nconst styles=["regular","light","duotone","brands"];const stylePrefixes=["far","fal","fad","fab"];/* harmony default export */ const FontAwesome = (props=>{if(!props.icon)return null;const style1=styles.find(style=>style===props.icon.split(" ")[0].match(/[a-z]+(?!.*-)/)[0]);const stylePrefix=stylePrefixes[styles.indexOf(style1)]??"fas";const iconName=props.icon.replace(`-${style1}`,"");return React.createElement("span",{style:props.color?{color:props.color}:null,className:joinClassNames(stylePrefix,`fa-${iconName}`,props.className??"",[props.spin??false,"fa-spin"]).trim()})});\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/icons/index.ts\n\n;// CONCATENATED MODULE: ./src/renderer/powercord/components/index.ts\nnew logger("Components",true);let components_Components={settings:{TextInput: TextInput,RadioGroup: RadioGroup,Category: category,ColorPickerInput: ColorPickerInput,SliderInput: slider,FormItem: formitem,SelectInput: SelectInput,Checkbox: Checkbox,TextAreaInput: textareainput},Icon: components_icon,AsyncComponent: AsyncComponent,modal:modal,Icons: icons_namespaceObject,ColorPicker: colorpicker,Divider: divider};promise.then(async()=>{for(const id in components){const options=components[id];let component=(()=>{if(typeof options.filter==="function"){return webpack.findModule(options.filter)}if(typeof options.filter==="string"){return webpack.findByDisplayName(options.filter)}if(Array.isArray(options.filter)){return webpack.findByProps(...options.filter)}})();if(options.updater){const temp=component;component=createUpdateWrapper(component,void 0,void 0,options.valueProps);Object.assign(component,temp)}let data={};if(Array.isArray(options.prop)){Object.assign(data,Object.fromEntries(options.prop.map(prop=>[prop,component[prop]])))}else if(typeof options.prop==="string"){data=component[options.prop]}if(Array.isArray(options.rename)){for(const{from,to}of options.rename){data[to]=component[from]}}if(!Array.isArray(options.rename)&&!options.prop){data=component}const target=options.settings?components_Components.settings:components_Components;Object.assign(target,{[id]:data})}});/* harmony default export */ const powercord_components = (components_Components);\n;// CONCATENATED MODULE: ./src/renderer/powercord/data/modules.ts\n/* harmony default export */ const data_modules = ({messages:["sendMessage","editMessage","deleteMessage"],typing:["startTyping"],http:["getAPIBaseURL","get","put","post"],constants:["Endpoints","AuditLogActionTypes","AutoCompleteResultTypes","BITRATE_DEFAULT"],channels:["getChannelId","getLastSelectedChannelId","getVoiceChannelId"],spotify:["play","pause","fetchIsSpotifyProtocolRegistered"],spotifySocket:["getActiveSocketAndDevice","getPlayerState","hasConnectedAccount"],React:["createRef","createElement","Component","PureComponent"],ReactDOM:["render","createPortal"],contextMenu:["openContextMenu","closeContextMenu"],modal:["push","update","pop","popWithKey"],Flux:["Store","connectStores"],FluxDispatcher:["_currentDispatchActionType","_processingWaitQueue"],Router:["BrowserRouter","Router"],hljs:["initHighlighting","highlight"],i18n:["Messages","getLanguages",m=>m.Messages.CLOSE]});\n;// CONCATENATED MODULE: ./src/renderer/powercord/webpack.ts\nfunction getModule(filter,retry=true,forever=false){if(Array.isArray(filter)){const props=filter;filter=m=>m&&props.every(key=>typeof key==="function"?key(m):key in m)}if(typeof filter!=="function")return retry?Promise.resolve(null):null;if(!retry)return webpack.findModule(filter,{cache:true,all:false});return new Promise(async resolve=>{for(let i=0;i<(forever?666:21);i++){const found=webpack.findModule(filter,{cache:true,all:false});if(found){return resolve(found)}await utilities_sleep(100)}})}function getModuleByDisplayName(displayName,retry,forever){return getModule(m=>m.displayName?.toLowerCase()===displayName.toLowerCase(),retry,forever)}function getAllModules(filter){if(Array.isArray(filter)){const props=filter;filter=m=>m&&props.every(key=>key in m)}return webpack.findModules(filter)}async function init(){for(const[moduleId,props]of Object.entries(data_modules)){webpack_webpack[moduleId]=await getModule(props)}Object.freeze(webpack_webpack)}const webpack_webpack={getModule,getAllModules,getModuleByDisplayName};/* harmony default export */ const powercord_webpack = (webpack_webpack);\n;// CONCATENATED MODULE: ./src/renderer/powercord/injector.ts\nfunction inject(id,module,functionName,callback,pre=false){if(!module)throw new Error(`Failed to patch ${id}; module is invalid.`);if(pre){Patcher.before(id,module,functionName,(_this,args)=>{return Reflect.apply(callback,_this,[args])})}else{Patcher.after(id,module,functionName,(_this,args,ret)=>{return Reflect.apply(callback,_this,[args,ret])})}}function uninject(id){return Patcher.unpatchAll(id)}function isInjected(id){return Patcher.getPatchesByCaller(id).length>0}const injector={inject,uninject,isInjected};/* harmony default export */ const powercord_injector = (injector);\n;// CONCATENATED MODULE: ./src/renderer/ui/discordicon.tsx\nfunction discordicon_extends(){discordicon_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return discordicon_extends.apply(this,arguments)}const discordicon_cache=new Map();function DiscordIcon({name,...props}){const IconComponent=(discordicon_cache.get(name)??(discordicon_cache.set(name,webpack.findByDisplayName(name)),discordicon_cache.get(name)))??(()=>null);return React.createElement(IconComponent,discordicon_extends({},props))}\n;// CONCATENATED MODULE: ./src/renderer/ui/changelog.tsx\nfunction changelog_extends(){changelog_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return changelog_extends.apply(this,arguments)}/* harmony default export */ const changelog = (fromPromise(promise.then(()=>{const{Markdown,Flex,Forms:{FormTitle},ModalComponents:{ModalRoot,ModalHeader,ModalContent,ModalCloseButton}}=discord;const[changelogClasses,modalClasses,]=webpack.bulk(Filters.byProps("progress","improved","container"),m=>m.content&&m.modal&&Object.keys(m).length===2);const ItemTypes={IMPROVED:changelogClasses.improved,ADDED:changelogClasses.added,FIXED:changelogClasses.fixed,PROGRESS:changelogClasses.progress};const buildChangelogItem=function(item1,index){return React.createElement(React.Fragment,{key:item1.title},React.createElement("h1",{className:joinClassNames(changelogClasses.title,ItemTypes[item1.type]??ItemTypes.ADDED,[index===0,"pc-margin-top-0"])},item1.title),React.createElement("ul",null,item1.items.map(item=>React.createElement("li",{key:item},React.createElement(Markdown,null,item)))))};return function ChangeLog({items,title,...props}){return React.createElement(ModalRoot,changelog_extends({},props,{className:joinClassNames(changelogClasses.container,modalClasses.content)}),React.createElement(ModalHeader,{separator:false},React.createElement(Flex.Child,{basis:"auto",grow:1,shrink:1,wrap:false},React.createElement(FormTitle,{tag:FormTitle.Tags.H2},title)),React.createElement(Flex.Child,{basis:"auto",rgrow:0,shrink:1,wrap:false},React.createElement(ModalCloseButton,{onClick:props.onClose}))),React.createElement(ModalContent,null,items.map(buildChangelogItem)))}})));\n;// CONCATENATED MODULE: ./src/renderer/ui/modals.ts\nclass Modals{static get TextInput(){return memoize(this,"TextInput",createUpdateWrapper(TextInput))}static showConfirmationModal(title,content,options={}){const{confirmText="Okay",cancelText="Cancel",onConfirm=()=>{},onCancel=()=>{},danger=false}=options;const{ModalsApi,ConfirmationModal,React,Markdown,Button}=discord;return ModalsApi.openModal(props=>{return React.createElement(ConfirmationModal,Object.assign({header:title,confirmText:confirmText,cancelText:cancelText,onConfirm,onCancel,confirmButtonColor:danger?Button.Colors.RED:Button.Colors.BRAND},props),typeof content==="string"?React.createElement(Markdown,null,content):content)})}static prompt(title,content,options={}){const{placeholder="",onInput=()=>{}}=options;let value="";return this.showConfirmationModal(title,React.createElement(this.TextInput,{note:content,value:value,placeholder:placeholder,onChange:val=>{value=val}}),{onConfirm:()=>{onInput(value)}})}static alert(title,content){return this.showConfirmationModal(title,content,{cancelText:null})}static showChangeLog(title,items){const{ModalsApi}=discord;return ModalsApi.openModal(props=>{return React.createElement(changelog,Object.assign({title,items},props))})}}\n;// CONCATENATED MODULE: ./src/renderer/ui/components/settingspanel.tsx\nlet SettingsContext=null;promise.then(()=>{SettingsContext=discord.React.createContext()});function SettingsPanel({store,name,children,header=null}){const{Caret}=discord;const[,forceUpdate]=discord.React.useReducer(n=>n+1,0);const[subPage,setSubPage]=discord.React.useState({label:"",render:null});const hasSubPage=discord.React.useMemo(()=>{return typeof subPage.render==="function"&&subPage.label},[subPage]);discord.React.useEffect(()=>{store.addChangeListener(forceUpdate);return()=>{store.removeChangeListener(forceUpdate)}},[store]);const API={setPage(options){setSubPage(options)},reset(){setSubPage({render:null,label:""})}};return React.createElement(errorboundary,null,React.createElement(SettingsContext.Provider,{value:API},React.createElement("div",{className:"pc-settings-panel"},React.createElement("div",{className:"pc-settings-title"},hasSubPage?React.createElement("div",{className:"pc-settings-title-name",onClick:()=>API.reset()},name):name,hasSubPage?React.createElement(React.Fragment,null,React.createElement(Caret,{direction:Caret.Directions.RIGHT,className:"pc-settings-title-caret"}),React.createElement("div",{className:"pc-settings-title-sub"},subPage.label)):null,header),hasSubPage?subPage.render():children())))}\n;// CONCATENATED MODULE: ./src/renderer/powercord/classes/settings.ts\nlet SettingsModule;promise.then(()=>{SettingsModule=class SettingsModule extends discord.Flux.Store{constructor(id1){super(discord.Dispatcher,{});this.getKeys=()=>{return Reflect.ownKeys(this.settings)};this.get=(id,defaultValue)=>{return this.settings[id]??defaultValue};this.toggle=id=>{this.set(id,!this.get(id))};this.set=(id,value)=>{if(value===void 0){this.toggle(id)}else{this.settings[id]=value}this.save()};this.save=()=>{datastore.trySaveData(this.id,this.settings);this.emitChange()};this.settings=datastore.tryLoadData(id1);this.id=id1;Object.assign(this,this.makeProps())}connectStore(){return discord.Flux.connectStores([this],()=>this.makeProps())}makeProps(){return{settings:this.settings,getSetting:this.get.bind(this),getSettings:()=>this.settings,updateSetting:this.set.bind(this),toggleSetting:this.toggle.bind(this)}}}});const settings_cache=new Map();function getSettings(id){if(!settings_cache.has(id)){const Settings=new SettingsModule(id);settings_cache.set(id,Settings);Settings.save();return Settings}return settings_cache.get(id)}\n;// CONCATENATED MODULE: ./src/renderer/powercord/api/settings.ts\nlet store=null;let settings=new Map();const tabs=new Proxy(settings,{has(target,key){return settings.has(key)||target[key]!=null},set(target,key,value){return target[key]=value,true},get(target,key1){if(key1==="hasOwnProperty")return key=>{return settings.has(key)||key in settings};return settings.get(key1)??target[key1]}});promise.then(()=>{store=Object.assign(getSettings("powercord"),{_fluxProps(id){return getSettings(id).makeProps()}})});function registerSettings(id,options){id=powercord.pluginManager.resolve(id)?.entityID||powercord.pluginManager.resolve(options.category)?.entityID||id||options.category;options.render=connectStores(id)(options.render);settings.set(id,options)}function unregisterSettings(id){settings.delete(id)}function _fluxProps(id){return getSettings(id)?.makeProps()}function connectStores(id){return getSettings(id)?.connectStore()}\n;// CONCATENATED MODULE: ./src/renderer/ui/components/addoncard.tsx\nfunction addoncard_extends(){addoncard_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return addoncard_extends.apply(this,arguments)}function ToolButton({label,icon,onClick,danger=false,disabled=false}){const{Button,Tooltips:{Tooltip}}=discord;return React.createElement(Tooltip,{text:label,position:"top"},props=>React.createElement(Button,addoncard_extends({},props,{className:"pc-settings-toolbutton",look:Button.Looks.BLANK,size:Button.Sizes.NONE,onClick:onClick,disabled:disabled}),React.createElement(DiscordIcon,{name:icon,color:danger?"#ed4245":void 0,width:"20",height:"20"})))}function ButtonWrapper({value,onChange,disabled=false}){const{Switch}=discord;const[isChecked,setChecked]=React.useState(value);return React.createElement(Switch,{className:"pc-settings-addons-switch",checked:isChecked,disabled:disabled,onChange:()=>{onChange(!isChecked);setChecked(!isChecked)}})}function getPanel(id){const get=settings.get(id);if(get)return get;for(const[key,options]of settings.entries()){if(options.category==id)return settings.get(key)}return null}function AddonCard({addon,manager,openSettings,hasSettings,type}){const{Markdown}=discord;const[,forceUpdate]=React.useReducer(n=>n+1,0);const SettingsApi=React.useContext(SettingsContext);React.useEffect(()=>{manager.on("toggle",name=>{if(name!==addon.entityID)return;forceUpdate()})},[addon,manager]);return React.createElement("div",{style:{"--plugin-color":addon.color},className:"pc-settings-addon-card "+addon.manifest.name?.replace(/ /g,"-")},React.createElement("div",{className:"pc-settings-card-header"},React.createElement("div",{className:"pc-settings-card-field pc-settings-card-name"},addon.manifest.name),"version"in addon.manifest&&React.createElement("div",{className:"pc-settings-card-field"},"v",addon.manifest.version),"author"in addon.manifest&&React.createElement("div",{className:"pc-settings-card-field"}," by ",addon.manifest.author),React.createElement("div",{className:"pc-settings-card-controls"},getPanel(addon.entityID)&&React.createElement(ToolButton,{label:"Settings",icon:"Gear",onClick:()=>{const Settings=getPanel(addon.entityID);SettingsApi.setPage({label:addon.manifest.name,render:typeof Settings.render==="function"?()=>discord.React.createElement(Settings.render,settings_cache.get(addon.entityID).makeProps()):Settings.render})}}),React.createElement(ToolButton,{label:"Reload",icon:"Replay",disabled:!manager.isEnabled?.(addon)??true,onClick:()=>manager.reload(addon)}),React.createElement(ToolButton,{label:"Open Path",icon:"Folder",onClick:()=>{PCCompatNative.executeJS(`require("electron").shell.showItemInFolder(${JSON.stringify(addon.path)})`)}}),React.createElement(ToolButton,{label:"Delete",icon:"Trash",onClick:()=>{Modals.showConfirmationModal("Are you sure?",`Are you sure that you want to delete the ${type} "${addon.manifest.name}"?`,{danger:true,onConfirm:()=>{manager.delete(addon.entityID)}})}}),React.createElement(ButtonWrapper,{value:manager.isEnabled?.(addon)??false,onChange:()=>{manager.toggle(addon)}}))),addon.manifest.description&&React.createElement("div",{className:"pc-settings-card-desc"},React.createElement(Markdown,null,addon.manifest.description)))}\n;// CONCATENATED MODULE: ./src/renderer/ui/components/addonpanel.tsx\nfunction addonpanel_extends(){addonpanel_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return addonpanel_extends.apply(this,arguments)}const sortLabels=["name","author","version","description","added"];const searchLabels=["name","author","description"];const orderLabels=["ascending","descending"];async function sortAddons(addons,order,query,searchOptions,sortBy){return addons.filter(addon=>{if(!query)return true;const{manifest}=addon;return["name","author","description"].some(type=>searchOptions[type]&&String(manifest[type]??"").toLowerCase().includes(query.toLowerCase()))}).sort((a,b)=>{const first=a.manifest[sortBy]??"";const second=b.manifest[sortBy]??"";if(typeof first==="string")return String(first).toLowerCase().localeCompare(String(second).toLowerCase());if(first>second)return 1;if(second>first)return-1;return 0})[order==="ascending"?"reverse":"slice"](0)}function OverflowContextMenu({type:addonType}){const{ContextMenu}=discord;const[sortBy,searchOptions,order]=datastore.useEvent("misc",()=>[datastore.getMisc(`${addonType}.sortBy`,"name"),datastore.getMisc(`${addonType}.searchOption`,{author:true,name:true,description:true}),datastore.getMisc(`${addonType}.order`,"descending")]);return React.createElement(ContextMenu.Menu,{navId:"OverflowContextMenu"},React.createElement(ContextMenu.ControlItem,{id:"order-header",control:()=>React.createElement("h5",{className:"pc-settings-overflow-header"},"Order")}),React.createElement(ContextMenu.Separator,{key:"separator"}),React.createElement(ContextMenu.Group,null,orderLabels.map(type=>React.createElement(ContextMenu.RadioItem,{key:"order-"+type,label:type[0].toUpperCase()+type.slice(1),checked:order===type,id:"sortBy-"+type,action:()=>{datastore.setMisc(void 0,`${addonType}.order`,type)}}))),React.createElement(ContextMenu.Separator,{key:"separator"}),React.createElement(ContextMenu.ControlItem,{id:"sort-header",control:()=>React.createElement("h5",{className:"pc-settings-overflow-header"},"Sort Options")}),React.createElement(ContextMenu.Separator,{key:"separator"}),React.createElement(ContextMenu.Group,null,sortLabels.map(type=>React.createElement(ContextMenu.RadioItem,{key:"sortBy-"+type,label:type[0].toUpperCase()+type.slice(1),checked:sortBy===type,id:"sortBy-"+type,action:()=>{datastore.setMisc(void 0,`${addonType}.sortBy`,type)}}))),React.createElement(ContextMenu.Separator,{key:"separator"}),React.createElement(ContextMenu.ControlItem,{id:"search-header",control:()=>React.createElement("h5",{className:"pc-settings-overflow-header"},"Search Options")}),React.createElement(ContextMenu.Separator,{key:"separator"}),React.createElement(ContextMenu.Group,null,searchLabels.map(type=>React.createElement(ContextMenu.CheckboxItem,{key:"search-"+type,id:"search-"+type,label:type[0].toUpperCase()+type.slice(1),checked:searchOptions[type],action:()=>{datastore.setMisc(void 0,`${addonType}.searchOption.${type}`,!searchOptions[type])}}))))}function AddonPanel({manager,type}){const{React:React1,Button,Tooltips,SearchBar,PlaceholderClasses,Popout}=discord;const{i18n:{Messages}}=powercord.webpack;const[query,setQuery]=React1.useState("");const[addons1,setAddons]=React1.useState(null);const[sortBy,searchOptions,order]=datastore.useEvent("misc",()=>[datastore.getMisc(`${type}.sortBy`,"name"),datastore.getMisc(`${type}.searchOption`,{author:true,name:true,description:true}),datastore.getMisc(`${type}.order`,"descending")]);React1.useEffect(()=>{manager.on("delete",()=>{setAddons(manager.addons)});manager.on("entityChange",()=>{setAddons(manager.addons)})},[manager]);React1.useEffect(()=>{sortAddons(Array.from(manager.addons),order,query,searchOptions,sortBy).then(addons=>setAddons(addons))},[query,manager,type,order,searchOptions,sortBy]);return React.createElement("div",{className:"pc-settings-addons"},React.createElement("div",{className:"pc-settings-addons-controls"},React.createElement(SearchBar,{onQueryChange:value=>setQuery(value),onClear:()=>setQuery(""),placeholder:`Search ${type}s...`,size:SearchBar.Sizes.SMALL,query:query,className:"pc-settings-addons-search"}),React.createElement(Tooltips.Tooltip,{text:"Load missing",position:"bottom"},props=>React.createElement(Button,addonpanel_extends({},props,{size:Button.Sizes.NONE,look:Button.Looks.BLANK,className:"pc-settings-load-missing",onClick:()=>manager.loadAll(true)}),React.createElement(DiscordIcon,{name:"Replay",width:20,height:20}))),React.createElement(Tooltips.Tooltip,{text:"Open folder",position:"bottom"},props=>React.createElement(Button,addonpanel_extends({},props,{size:Button.Sizes.NONE,look:Button.Looks.BLANK,className:"pc-settings-open-folder",onClick:()=>PCCompatNative.executeJS(`require("electron").shell.openPath(\'${JSON.stringify(manager.folder)}\')`)}),React.createElement(DiscordIcon,{name:"Folder",width:20,height:20}))),React.createElement(Tooltips.Tooltip,{text:"Options",position:"bottom"},props=>React.createElement(Popout,{position:Popout.Positions.TOP,animation:Popout.Animation.SCALE,align:Popout.Align.RIGHT,spacing:12,renderPopout:()=>React.createElement(OverflowContextMenu,{type:type})},popoutProps=>React.createElement(Button,addonpanel_extends({},props,popoutProps,{size:Button.Sizes.NONE,look:Button.Looks.BLANK,className:"pc-settings-overflow-menu"}),React.createElement(DiscordIcon,{name:"OverflowMenu",width:"20",height:"20"}))))),React.createElement("div",{className:"pc-settings-card-scroller"},addons1?.length?addons1.map(addon=>React.createElement(AddonCard,{addon:addon,hasSettings:false,manager:manager,type:type,key:addon.manifest.name,openSettings:()=>{}})):React.createElement("div",{className:"pc-settings-empty"},React.createElement("div",{className:PlaceholderClasses?.emptyStateImage}),React.createElement("p",null,Messages.GIFT_CONFIRMATION_HEADER_FAIL),React.createElement("p",null,Messages.SEARCH_NO_RESULTS))))}\n;// CONCATENATED MODULE: ./src/renderer/modules/settings.ts\nconst SettingsRenderer=new class SettingsRenderer{get sidebarClass(){return memoize(this,"sidebarClass",webpack.findByProps("standardSidebarView"))}registerPanel(id,options){const{label,render,order}=options;const tab=this.panels.find(e=>e.id===id);if(tab)throw new Error(`Settings tab ${id} is already registered!`);const panel={section:id,label:label,order:order,className:`pccompat-settings-${id}-item`,predicate:options.predicate??(()=>true),element:()=>discord.React.createElement(SettingsPanel,{name:label,store:getSettings(id),children:render,header:options.header??null})};this.panels=this.panels.concat(panel).sort(this.sortPanels);return()=>{const index=this.panels.indexOf(panel);if(index<0)return false;this.panels.splice(index,1);return true}}unregisterPanel(id){const panel=this.panels.findIndex(e=>e.id===id);if(panel<0)return;this.panels.splice(panel,1);this.forceUpdate()}sortPanels(a,b){return a.order-b.order}async patchSettingsView(){const SettingsView=await webpack.findLazy(webpack.Filters.byDisplayName("SettingsView"));if(this.promises.cancelled)return;Patcher.after("PCSettings",SettingsView.prototype,"getPredicateSections",(_,__,res)=>{if(!Array.isArray(res)||!res.some(e=>e?.section?.toLowerCase()==="changelog")||res.some(s=>s?.id==="pc-settings"))return;const index=res.findIndex(s=>s?.section?.toLowerCase()==="changelog")-1;if(index<0)return;const panels=[...this.defaultPanels];for(let i=0;i<this.panels.length;i++){if(this.panels[i].predicate&&!this.panels[i].predicate())continue;panels.push(this.panels[i])}res.splice(index,0,...panels)});events.addEventListener("reload-core",()=>{Patcher.unpatchAll("PCSettings");this.promises.cancel()})}forceUpdate(){const[node]=document.getElementsByName(this.sidebarClass.standardSidebarView);if(!node)return;const instance=getOwnerInstance(node,e=>e?.constructor?.displayName==="SettingsView");if(instance)instance.forceUpdate()}constructor(){this.panels=[];this.promises={cancelled:false,cancel(){this.cancelled=true}};this.defaultPanels=[{section:"DIVIDER"},{section:"HEADER",label:"Powercord"},]}};/* harmony default export */ const modules_settings = (SettingsRenderer);\n;// CONCATENATED MODULE: ./src/renderer/node/electron.ts\nconst electron=window.process?.contextIsolated??true?{ipcRenderer:PCCompatNative.executeJS(`PCCompatNative.cloneObject(require("electron").ipcRenderer)`),shell:PCCompatNative.executeJS(`require("electron").shell`),clipboard:PCCompatNative.executeJS(`require("electron").clipboard`),contextBridge:{exposeInMainWorld(name,value){window[name]=value}},remote:null}:window.require("electron");function setRemote(module){electron.remote=module}/* harmony default export */ const node_electron = (electron);\n;// CONCATENATED MODULE: ./src/renderer/node/index.ts\n\n;// CONCATENATED MODULE: ./src/renderer/powercord/pluginmanager.ts\nconst pluginmanager_Logger=logger.create("PluginManager");class PluginManager extends Emitter{static get folder(){return node_path.resolve(datastore.baseDir,"plugins")}static get addons(){return Array.from(this.plugins,e=>e[1])}static initialize(){modules_settings.registerPanel("pc-moduleManager-plugins",{label:"Plugins",order:1,render:()=>discord.React.createElement(AddonPanel,{type:"plugin",manager:this})});this.states=datastore.tryLoadData("plugins");if(!window.__PC_PLUGINS__)this.loadAll();events.addEventListener("reload-core",()=>{window.__PC_PLUGINS__=Array.from(this.plugins)})}static loadAll(missing=false){if(!fs.existsSync(this.folder)){try{fs.mkdirSync(this.folder)}catch(error){return void pluginmanager_Logger.error("PluginsManager",`Failed to create plugins folder:`,error)}}if(!fs.statSync(this.folder).isDirectory())return void pluginmanager_Logger.error("PluginsManager",`Plugins dir isn\'t a folder.`);if(!missing)pluginmanager_Logger.log("PluginsManager","Loading plugins...");const missingEntities=[];for(const file of fs.readdirSync(this.folder,"utf8")){const location=node_path.resolve(this.folder,file);if(!fs.statSync(location).isDirectory())continue;if(!fs.existsSync(node_path.join(location,"manifest.json")))continue;if(!fs.statSync(node_path.join(location,"manifest.json")).isFile())continue;if(fs.existsSync(node_path.join(location,"node_modules")))globalPaths.push(node_path.join(location,"node_modules"));try{if(missing){const plugin=this.resolve(file,true);if(plugin)continue;this.loadPlugin(location);missingEntities.push(this.resolve(file).displayName)}else{this.loadPlugin(location)}}catch(error){pluginmanager_Logger.error(`Failed to load ${file}:`,error)}}if(missing&&missingEntities.length){powercord.api.notices.sendToast(null,{content:`The following plugins were loaded: ${missingEntities.join(\', \')}`,header:"Missing plugins found",type:"success"});this.emit("entityChange")}else if(missing&&!missingEntities.length){powercord.api.notices.sendToast(null,{content:"Couldn\'t find any plugins that aren\'t already loaded.",header:"Missing plugins not found",type:"danger"})}}static clearCache(plugin){if(!node_path.isAbsolute(plugin))plugin=node_path.resolve(this.folder,plugin);const object=!window.process||process.contextIsolated?node_module:window.require;const cache=Object.keys(object.cache).filter(c=>~c.indexOf(plugin));for(const item of cache){delete object.cache[item]}}static resolve(pluginOrName,nullish=false){if(this.plugins.has(pluginOrName))return this.plugins.get(pluginOrName);if(this.getByDisplayName(pluginOrName))return this.getByDisplayName(pluginOrName);return nullish?null:pluginOrName}static saveData(){datastore.trySaveData("plugins",this.states)}static isEnabled(addon){const plugin=this.resolve(addon);if(!plugin)return;return Boolean(this.states[plugin.entityID])}static loadPlugin(location,log=true){const manifest=Object.freeze(node_require(node_path.resolve(location,"manifest.json")));if(this.plugins.get(manifest.name))throw new Error(`Plugin with name ${manifest.name} already exists!`);let exports={};try{this.clearCache(location);const data=node_require(location);Object.defineProperties(data.prototype,{entityID:{value:node_path.basename(location),configurable:false,writable:false},manifest:{value:manifest,configurable:false,writable:false},settings:{value:getSettings(node_path.basename(location)),configurable:true,writable:true},path:{value:location,configurable:false,writable:false}});exports=new data(node_path.basename(location),location)}catch(error){return void pluginmanager_Logger.error(`Failed to compile ${manifest.name||node_path.basename(location)}:`,error)}if(log){pluginmanager_Logger.log(`${manifest.name} was loaded!`)}this.plugins.set(node_path.basename(location),exports);if(this.isEnabled(node_path.basename(location))){this.startPlugin(exports)}}static unloadAddon(addon,log=true){const plugin=this.resolve(addon);if(!addon)return;const success=this.stopPlugin(plugin);this.plugins.delete(plugin.entityID);this.clearCache(plugin.path);if(log){pluginmanager_Logger.log(`${plugin.displayName} was unloaded!`)}return success}static reloadPlugin(addon){const plugin=this.resolve(addon);if(!addon)return;const success=this.unloadAddon(plugin,false);if(!success){return pluginmanager_Logger.error(`Something went wrong while trying to unload ${plugin.displayName}:`)}this.loadPlugin(plugin.path,false);pluginmanager_Logger.log(`Finished reloading ${plugin.displayName}.`)}static startPlugin(addon,log=true){const plugin=this.resolve(addon);if(!plugin)return;try{if(typeof plugin.startPlugin==="function")plugin.startPlugin();if(log){pluginmanager_Logger.log(`${plugin.displayName} has been started!`)}}catch(error){pluginmanager_Logger.error(`Could not start ${plugin.displayName}:`,error)}return true}static stopPlugin(addon,log=true){const plugin=this.resolve(addon);if(!plugin)return;try{if(typeof plugin.pluginWillUnload==="function")plugin.pluginWillUnload();if(log){pluginmanager_Logger.log(`${plugin.displayName} has been stopped!`)}}catch(error){pluginmanager_Logger.error(`Could not stop ${plugin.displayName}:`,error);return false}return true}static enablePlugin(addon,log=true){const plugin=this.resolve(addon);if(!plugin)return;this.states[plugin.entityID]=true;datastore.trySaveData("plugins",this.states);this.startPlugin(plugin,false);if(log){pluginmanager_Logger.log(`${plugin.displayName} has been enabled!`);this.emit("toggle",plugin.entityID,true)}}static disablePlugin(addon,log=true){const plugin=this.resolve(addon);if(!plugin)return;this.states[plugin.entityID]=false;datastore.trySaveData("plugins",this.states);this.stopPlugin(plugin,false);if(log){pluginmanager_Logger.log(`${plugin.displayName} has been disabled!`);this.emit("toggle",plugin.entityID,false)}}static delete(addon){const plugin=this.resolve(addon);if(!plugin)return;this.unloadAddon(plugin);PCCompatNative.executeJS(`require("electron").shell.trashItem(${JSON.stringify(plugin.path)})`);this.emit("delete",plugin)}static toggle(addon){const plugin=this.resolve(addon);if(!plugin)return;if(this.isEnabled(plugin.entityID))this.disable(plugin);else this.enable(plugin)}static get(name){return this.plugins.get(name)}static getPlugins(){return[...this.plugins.keys()]}static getByDisplayName(displayName){return this.addons.find(e=>e?.constructor?.name===displayName)}static get enable(){return this.enablePlugin}static get disable(){return this.disablePlugin}static get reload(){return this.reloadPlugin}static get remount(){return this.reloadPlugin}static get loadAllPlugins(){return this.loadAll}}PluginManager.mainFiles=["index.js","index.jsx"];PluginManager.plugins=new Map(window.__PC_PLUGINS__??[]);\n;// CONCATENATED MODULE: ./src/renderer/powercord/classes/theme.ts\nclass theme_Theme{get color(){return"#7289da"}_loadStylesheet(_path){const stylePath=node_path.isAbsolute(_path)?_path:node_path.resolve(this.path,_path);try{if(!fs.existsSync(stylePath))throw new Error(`Stylesheet not found at ${stylePath}`);const content=node_require(stylePath);const id=`${this.entityID}-${random()}`;this.stylesheets[id]=DOM.injectCSS(id,content)}catch(error){console.error(`Could not load stylesheet:`,error)}}_load(){this._loadStylesheet(node_path.resolve(this.path,this.manifest.theme))}_unload(){const keys=Object.keys(this.stylesheets);for(let i=0;i<keys.length;i++){this.stylesheets[keys[i]].remove();delete this.stylesheets[keys[i]]}}get displayName(){return this.manifest.name}constructor(){this.stylesheets={}}}\n;// CONCATENATED MODULE: ./src/renderer/powercord/stylemanager.ts\nconst stylemanager_Logger=logger.create("StyleManager");class StyleManager extends Emitter{static get folder(){return node_path.resolve(datastore.baseDir,"themes")}static get addons(){return Array.from(this.themes,e=>e[1])}static initialize(){modules_settings.registerPanel("pc-moduleManager-themes",{label:"Themes",order:2,render:()=>discord.React.createElement(AddonPanel,{type:"theme",manager:this})});this.states=datastore.tryLoadData("themes");if(!window.__PC_THEMES__)this.loadAll();events.addEventListener("reload-core",()=>{window.__PC_PLUGINS__=Array.from(this.themes)})}static loadAll(missing=false){if(!fs.existsSync(this.folder)){try{fs.mkdirSync(this.folder)}catch(error){return void stylemanager_Logger.error("StyleManager",`Failed to create themes folder:`,error)}}if(!fs.statSync(this.folder).isDirectory())return void stylemanager_Logger.error("StyleManager",`Plugins dir isn\'t a folder.`);if(!missing)stylemanager_Logger.log("StyleManager","Loading themes...");const missingEntities=[];for(const file of fs.readdirSync(this.folder,"utf8")){const location=node_path.resolve(this.folder,file);if(!fs.statSync(location).isDirectory())continue;if(!this.mainFiles.some(f=>fs.existsSync(node_path.join(location,f))))continue;try{if(missing){const theme=this.resolve(file);if(theme)continue;this.loadTheme(location);missingEntities.push(this.resolve(file).displayName)}else{this.loadTheme(location)}}catch(error){stylemanager_Logger.error(`Failed to load theme ${file}:`,error)}}if(missing&&missingEntities.length){powercord.api.notices.sendToast(null,{content:`The following themes were loaded: ${missingEntities.join(\', \')}`,header:"Missing themes found",type:"success"});this.emit("entityChange")}else if(missing&&!missingEntities.length){powercord.api.notices.sendToast(null,{content:"Couldn\'t find any themes that aren\'t already loaded.",header:"Missing themes not found",type:"danger"})}}static clearCache(theme){if(!node_path.isAbsolute(theme))theme=node_path.resolve(this.folder,theme);const object=!window.process||process.contextIsolated?node_module:window.require;const cache=Object.keys(object.cache).filter(c=>~c.indexOf(theme));for(const item of cache){delete object.cache[item]}}static resolve(themeOrName){if(typeof themeOrName==="string")return this.themes.get(themeOrName);return themeOrName}static saveData(){datastore.trySaveData("themes",this.states)}static isEnabled(addon){const theme=this.resolve(addon);if(!theme)return;return Boolean(this.states[theme.entityID])}static loadTheme(location,log=true){const _path=node_path.resolve(location,this.mainFiles.find(f=>fs.existsSync(node_path.resolve(location,f))));const manifest=Object.freeze(node_require(_path));const entityID=node_path.basename(location);if(this.themes.get(entityID))throw new Error(`Theme with ID ${entityID} already exists!`);let data=new theme_Theme();try{this.clearCache(location);Object.defineProperties(data,{entityID:{value:entityID,configurable:false,writable:false},manifest:{value:manifest,configurable:false,writable:false},settings:{value:null,configurable:false,writable:false},path:{value:location,configurable:false,writable:false}})}catch(error){return void stylemanager_Logger.error(`Failed to compile ${manifest.name||node_path.basename(location)}:`,error)}if(log){stylemanager_Logger.log(`${manifest.name} was loaded!`)}this.themes.set(node_path.basename(location),data);if(this.isEnabled(node_path.basename(location))){this.startTheme(data)}}static unloadAddon(addon,log=true){const theme=this.resolve(addon);if(!addon)return;const success=this.stopTheme(theme);this.clearCache(theme.path);if(log){stylemanager_Logger.log(`${theme.displayName} was unloaded!`)}return success}static reloadTheme(addon){const theme=this.resolve(addon);if(!addon)return;const success=this.unloadAddon(theme,false);if(!success){return stylemanager_Logger.error(`Something went wrong while trying to unload ${theme.displayName}:`)}this.startTheme(theme,false);stylemanager_Logger.log(`Finished reloading ${theme.displayName}.`)}static startTheme(addon,log=true){const theme=this.resolve(addon);if(!theme)return;try{theme._load();if(log){stylemanager_Logger.log(`${theme.displayName} has been loaded!`)}}catch(error){stylemanager_Logger.error(`Could not load ${theme.displayName}:`,error)}return true}static stopTheme(addon,log=true){const theme=this.resolve(addon);if(!theme)return;try{theme._unload();if(log){stylemanager_Logger.log(`${theme.displayName} has been stopped!`)}}catch(error){stylemanager_Logger.error(`Could not stop ${theme.displayName}:`,error);return false}return true}static enableTheme(addon,log=true){const theme=this.resolve(addon);if(!theme)return;this.states[theme.entityID]=true;datastore.trySaveData("themes",this.states);this.startTheme(theme,false);if(log){stylemanager_Logger.log(`${theme.displayName} has been enabled!`);this.emit("toggle",theme.entityID,true)}}static disableTheme(addon,log=true){const theme=this.resolve(addon);if(!theme)return;this.states[theme.entityID]=false;datastore.trySaveData("themes",this.states);this.stopTheme(theme,false);if(log){stylemanager_Logger.log(`${theme.displayName} has been disabled!`);this.emit("toggle",theme.entityID,false)}}static delete(addon){const theme=this.resolve(addon);if(!theme)return;this.unloadAddon(theme);this.themes.delete(theme.entityID);PCCompatNative.executeJS(`require("electron").shell.trashItem(${JSON.stringify(theme.path)})`);this.emit("delete",theme)}static toggle(addon){const theme=this.resolve(addon);if(!theme)return;if(this.isEnabled(theme.entityID))this.disable(theme);else this.enable(theme)}static get(name){return this.themes.get(name)}static get enable(){return this.enableTheme}static get disable(){return this.disableTheme}static get reload(){return this.reloadTheme}static get remount(){return this.reloadTheme}static get getThemes(){return[...this.themes.keys()]}static get loadAllThemes(){return this.loadAll}}StyleManager.mainFiles=["powercord_manifest.json","manifest.json"];StyleManager.themes=new Map(window.__PC_THEMES__??[]);\n;// CONCATENATED MODULE: ./src/renderer/powercord/classes/plugin.ts\nclass plugin_Plugin{get color(){return"#7289da"}loadStylesheet(_path){const stylePath=node_path.isAbsolute(_path)?_path:node_path.resolve(this.path,_path);try{if(!fs.existsSync(stylePath))throw new Error(`Stylesheet not found at ${stylePath}`);const content=node_require(stylePath);const id=`${this.entityID}-${random()}`;this.stylesheets[id]=DOM.injectCSS(id,content)}catch(error){console.error(`Could not load stylesheet:`,error)}}log(...messages){console.log(`%c[Powercord:Plugin:${this.constructor.name}]`,`color: ${this.color};`,...messages)}debug(...messages){console.debug(`%c[Powercord:Plugin:${this.constructor.name}]`,`color: ${this.color};`,...messages)}warn(...messages){console.warn(`%c[Powercord:Plugin:${this.constructor.name}]`,`color: ${this.color};`,...messages)}error(...messages){console.error(`%c[Powercord:Plugin:${this.constructor.name}]`,`color: ${this.color};`,...messages)}_load(){PluginManager.startPlugin(this)}_unload(){PluginManager.stopPlugin(this)}get displayName(){return this.manifest.name}constructor(){this.stylesheets={}}}\n;// CONCATENATED MODULE: ./src/renderer/powercord/entities.ts\n\n;// CONCATENATED MODULE: ./src/renderer/modules/clyde.ts\nconst DefaultMessage={state:"SENT",author:{avatar:"__POWERCORD__",id:"94762492923748352",bot:true,discriminator:"#0001",username:"powerCord"},content:"Message."};promise.then(()=>{const{AvatarDefaults}=discord;if(!AvatarDefaults)return;AvatarDefaults.BOT_AVATARS["__POWERCORD__"]="https://cdn.discordapp.com/avatars/518171798513254407/665fe74ee3fbf58b9d5949d7e15dbafa.webp"});class Clyde{static sendMessage(channelId=discord.SelectedChannelStore.getChannelId(),message){const{MessageActions,MessageCreators,Lodash}=discord;MessageActions.receiveMessage(channelId,Lodash.merge({},MessageCreators.createBotMessage(channelId,message?.content),DefaultMessage,message))}}\n;// CONCATENATED MODULE: ./src/renderer/powercord/api/commands.ts\nconst commands_Logger=logger.create("Commands");const commands=new Map();const section={id:"powercord",type:1,name:"Powercord",icon:"https://cdn.discordapp.com/attachments/891039688352219198/908403940738093106/46755359.png"};function initialize(){const[AssetUtils,CommandUtils,Commands]=webpack.findByProps(["getApplicationIconURL"],["useApplicationCommandsDiscoveryState"],["queryCommands"],{bulk:true});const Icon=webpack.findByDisplayName("ApplicationCommandDiscoveryApplicationIcon",{default:true});Patcher.after("PowercordCommands",Icon,"default",(_,[props],res)=>{if(props.section.id===section.id){const img=findInReactTree(res,r=>r.props.src);img.props.src=section.icon}});Patcher.after("PowercordCommands",AssetUtils,"getApplicationIconURL",(_,[props])=>{if(props.id===section.id){return section.icon}});Patcher.after("PowercordCommands",Commands,"queryCommands",(_,[,,query],res)=>{const cmds=[...commands.values()].filter(e=>e.name.includes(query));res.push(...cmds)});Patcher.after("PowercordCommands",Commands,"getApplicationCommandSectionName",(_,[section1],res)=>{if(section1.id===section1.id)return section1.name});Patcher.after("PowercordCommands",CommandUtils,"useApplicationCommandsDiscoveryState",(_,[,,,isChat],res)=>{if(isChat!==false)return res;if(!res.discoverySections.find(d=>d.key==section.id)&&commands.size){const cmds=[...commands.values()];res.discoveryCommands.push(...cmds);res.commands.push(...cmds.filter(cmd=>!res.commands.some(e=>e.name===cmd.name)));res.discoverySections.push({data:cmds,key:section.id,section});res.sectionsOffset.push(commands.size)}if(!res.applicationCommandSections.find(s=>s.id==section.id)&&commands.size){res.applicationCommandSections.push(section)}const index=res.discoverySections.findIndex(e=>e.key==="-2");if(res.discoverySections[index]?.data){const section2=res.discoverySections[index];section2.data=section2.data.filter(c=>!c.__powercord);if(section2.data.length==0)res.discoverySections.splice(index,1)}});events.addEventListener("reload-core",()=>{Patcher.unpatchAll("PowercordCommands")})}async function handleCommand(options,args){const{command,executor}=options;try{const channel=discord.SelectedChannelStore.getChannelId();const res=await executor(args);if(!res||!res.result)return;if(!res.send){const options={embeds:[]};if(typeof res.result==="string"){options.content=res.result}else{options.embeds.push(res.result)}Clyde.sendMessage(channel,options)}else{discord.MessageActions.sendMessage(channel,{content:res.result,invalidEmojis:[],validNonShortcutEmojis:[],tts:false})}}catch(error){commands_Logger.error(`Could not executor for ${options.command}-${command}:`,error);Clyde.sendMessage(void 0,{content:":x: An error occurred while running this command. Check your console."})}}function registerCommand(options){const{command,executor,...cmd}=options;commands.set(command,{type:3,target:1,id:command,name:command,applicationId:section.id,options:[{type:3,required:false,description:`Usage: ${cmd.usage?.replace?.(/{c}/g,command)??command}`,name:"args"}],...cmd,__powercord:true,execute:async result=>{try{handleCommand(options,Object.values(result).map(e=>e.value)??[])}catch(error){commands_Logger.error(error)}}})}function unregisterCommand(id){commands.delete(id)}\n;// CONCATENATED MODULE: ./src/renderer/powercord/api/i18n.ts\npromise.then(()=>{const{LocaleManager,LocaleStore}=discord;locale=LocaleManager.getLocale();const listener=()=>{if(LocaleStore.locale!==locale){locale=LocaleStore.locale;LocaleManager.loadPromise.then(injectStrings)}};LocaleStore.addChangeListener(listener);injectStrings();events.addEventListener("reload-core",()=>{LocaleStore.removeChangeListener(listener)})});let messages={};let locale=null;function loadAllStrings(strings){for(let locale1 in strings){loadStrings(locale1,strings[locale1])}}function loadStrings(locale2,strings){if(!messages[locale2])messages[locale2]={};Object.assign(messages[locale2],strings);injectStrings()}function injectStrings(){if(!discord.LocaleManager)return;const context=discord.LocaleManager._provider._context;Object.assign(context.messages,messages[locale]);Object.assign(context.defaultMessages,messages["en-US"])}\n;// CONCATENATED MODULE: ./src/renderer/modules/dom.ts\nclass DOM{static get head(){return memoize(this,"head",document.head.appendChild(this.createElement("pc-head")))}static createElement(type,options={},...children){const node=Object.assign(document.createElement(type),options);node.append(...children);return node}static injectCSS(id,cssOrURL,options){switch(options?.type??"PLAIN"){case"PLAIN":var element=this.createElement("style",{id,textContent:cssOrURL});break;case"URL":var element=this.createElement("link",{rel:"stylesheet",href:cssOrURL});break}(options?.documentHead?document.head:this.head).appendChild(element);this.elements[id]=element;return element}static injectJS(id,url,options){return new Promise((resolve,reject)=>{const script=this.createElement("script",{id,src:url,onload:resolve,onerror:reject});(options?.documentHead?document.head:this.head).appendChild(script);this.elements[id]=script})}static getElement(id){return this.elements[id]||this.head.querySelector(`style[id="${id}"]`)}static clearCSS(id){const element=this.getElement(id);if(element)element.remove();delete this.elements[id]}}DOM.elements={};\n;// CONCATENATED MODULE: ./src/renderer/flux/zustand.ts\nfunction createStore(state){const listeners=new Set();const Api=Object.freeze({get listeners(){return listeners},getState(factory=_=>_){return factory(state)},setState(partial){const partialState=typeof partial==="function"?partial(state):partial;if(Object.is(state,partialState))return;state=Object.assign({},state,partialState);listeners.forEach(listener=>{listener(state)})},addListener(listener){if(listeners.has(listener))return;listeners.add(listener);return()=>listeners.delete(listener)},removeListener(listener){return listeners.delete(listener)}});function useState(factory=_=>_){const[,forceUpdate]=discord.React.useReducer(e=>e+1,0);discord.React.useEffect(()=>{const handler=()=>forceUpdate();listeners.add(handler);return()=>listeners.delete(handler)},[]);return Api.getState(factory)}Object.assign(useState,Api,{*[Symbol.iterator](){yield useState;yield Api}});return useState}\n;// CONCATENATED MODULE: ./src/renderer/flux/dispatcher.ts\nconst dispatcher_Logger=logger.create("FLuxDispatcher");function createDispatcher(){const events={};const API={events:events,emit(event){if(!events[event?.type])return;for(const callback of events[event.type]){try{callback(event)}catch(error){dispatcher_Logger.error(`Could not fire callback for ${event}:`,error)}}},on(event,callback){if(!events[event])events[event]=new Set();events[event].add(callback);return()=>API.off(event,callback)},off(event,callback){if(!events[event])return;return events[event].delete(callback)},once(event1,callback){const unsubscribe=API.on(event1,event=>{unsubscribe();return Reflect.apply(callback,null,[event])});return unsubscribe},useComponentDispatch:function useComponentDispatch(event,callback){discord.React.useEffect(()=>API.on(event,callback))}};return API}\n;// CONCATENATED MODULE: ./src/renderer/ui/notices.tsx\nfunction notices_extends(){notices_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return notices_extends.apply(this,arguments)}const[useNoticesStore,NoticesApi]=createStore({notices:{}});const Dispatcher=createDispatcher();const types={info:{icon:\'info-circle\',color:\'var(--info-help-foreground)\'},warning:{icon:\'exclamation-circle\',color:\'var(--info-warning-foreground)\'},danger:{icon:\'times-circle\',color:\'var(--info-danger-foreground)\'},success:{icon:\'check-circle\',color:\'var(--info-positive-foreground)\'}};function Notice(props){const{ReactSpring:{useSpring,animated},Button,Markdown}=discord;const[closing,setClosing]=React.useState(false);if(props.type&&types[props.type])props.icon={...types[props.type]};const spring=useSpring({from:{progress:0},to:{progress:100},config:key=>{switch(key){case"progress":return{duration:props.timeout};default:return{duration:0}}}});const startClosing=()=>{spring.progress.set(100)};Dispatcher.useComponentDispatch("SET_CLOSING",event=>{if(event.all)setClosing(true);if(event.id!==props.id)return;startClosing()});React.useEffect(()=>{if(!closing)return;setTimeout(props.onClose,380)},[closing]);return React.createElement(animated.div,{onMouseEnter:()=>spring.progress.pause(),onMouseLeave:()=>spring.progress.resume(),className:joinClassNames("pc-notice-container",[closing,"pc-notice-closing"])},React.createElement("div",{className:"pc-notice-header"},React.createElement("div",{className:"pc-notice-header-name"},props.icon&& typeof props.icon==\'object\'?React.createElement(FontAwesome,{className:"pc-notice-icon",spin:props.icon.spin,icon:props.icon.icon,color:props.icon.color}):React.createElement(FontAwesome,{className:"pc-notice-icon",icon:props.icon}),props.header),React.createElement(Button,{look:Button.Looks.BLANK,size:Button.Sizes.NONE,className:"pc-notice-close",onClick:()=>setClosing(true),onContextMenu:()=>Dispatcher.emit({type:"SET_CLOSING",all:true})},React.createElement(DiscordIcon,{name:"Close"}))),props.content&&React.createElement("div",{className:"pc-notice-content"},typeof props.content==="string"?React.createElement(Markdown,null,props.content):props.content),Array.isArray(props.buttons)&&React.createElement("div",{className:"pc-notice-footer"},props.buttons.map((button,i)=>button&&React.createElement(Button,{color:Button.Colors[button.color?.toUpperCase()??"BRAND_NEW"],look:Button.Looks[button.look?.toUpperCase()||"FILLED"],size:Button.Sizes[button.size?.toUpperCase()||"MIN"],onClick:()=>{button.onClick?.();setClosing(true)},key:"button-"+i,className:"pc-notice-button"},button.text))),props.timeout>0&&React.createElement("div",{className:"pc-notice-progress"},React.createElement(animated.div,{className:"pc-notice-progress-bar",style:{width:spring.progress.to(e=>{if(e>97&&props.timeout!==0&&!closing){setClosing(true)}return`${e}%`})}})))}function NoticesContainer(){const notices=useNoticesStore(s=>Object.entries(s.notices));return React.createElement(errorboundary,null,notices.map(([id,notice])=>React.createElement(Notice,notices_extends({id:id},notice,{key:id}))))}class Notices{static initialize(){const{ReactDOM}=discord;ReactDOM.render(React.createElement(NoticesContainer,null),this.container);document.body.appendChild(this.container);events.addEventListener("reload-core",()=>{ReactDOM.unmountComponentAtNode(this.container);this.container.remove()})}static show(options){const state=NoticesApi.getState();if(!options.id||state.notices[options.id])options.id=uuid();NoticesApi.setState({notices:{...state.notices,[options.id]:{...options,onClose:()=>{this.remove(options.id)}}}})}static close(id){const state=NoticesApi.getState();if(!state.notices[id])throw new Error(`Notice with id ${id} does not exist!`);Dispatcher.emit({type:"SET_CLOSING",id:id})}static remove(id){const state=NoticesApi.getState();if(!state.notices[id])throw new Error(`Notice with id ${id} already exists!`);delete state.notices[id];NoticesApi.setState({notices:{...state.notices}})}}Notices.container=DOM.createElement("div",{className:"pc-notices"});promise.then(()=>Notices.initialize())\n;// CONCATENATED MODULE: ./src/renderer/ui/components/announcement.tsx\nconst announcement_Logger=logger.create("Notices:Announcement");/* harmony default export */ const announcement = (fromPromise(promise.then(()=>{const Notices=webpack.findModule(m=>m.default?.displayName==="Notice");const NoticeCloseButton=Notices.NoticeCloseButton;const NoticeButtonAncor=Notices.NoticeButton;const Notice=Notices.default;const Colors={BLURPLE:Notices.NoticeColors.BRAND,RED:Notices.NoticeColors.DANGER,ORANGE:Notices.NoticeColors.DEFAULT,BLUE:Notices.NoticeColors.INFO,GREY:Notices.NoticeColors.NEUTRAL,DARK_GREY:Notices.NoticeColors.DARK,GREEN:Notices.NoticeColors.NOTIFICATION,BLURPLE_GRADIENT_1:Notices.NoticeColors.PREMIUM_TIER_1,BLURPLE_GRADIENT_2:Notices.NoticeColors.PREMIUM_TIER_2,SPOTIFY:Notices.NoticeColors.SPOTIFY,PURPLE:Notices.NoticeColors.STREAMER_MODE};return function Announcement(props){const handleClick=function(callback){try{closeAnnouncement(props.id);if(callback&& typeof callback==="function"){return callback()}}catch(err){return announcement_Logger.error(err)}};return React.createElement(Notice,{color:Colors[props.color?.toUpperCase()]??Colors.BLURPLE,id:props.id},React.createElement(NoticeCloseButton,{onClick:()=>handleClick(props.callback)}),props.message,props.button&&React.createElement(NoticeButtonAncor,{onClick:()=>handleClick(props.button.onClick)},props.button.text))}})));\n;// CONCATENATED MODULE: ./src/renderer/ui/components/announcementcontainer.tsx\nfunction announcementcontainer_extends(){announcementcontainer_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return announcementcontainer_extends.apply(this,arguments)}const useAnnouncements=createStore({elements:{}});const AnnouncementsStore=useAnnouncements;function AnnouncementContainer({store:useAnnouncements1}){const elements=useAnnouncements1(state=>state.elements);return React.createElement(React.Fragment,null,Object.values(elements).map(notice=>React.createElement(announcement,announcementcontainer_extends({},notice,{key:notice.id}))))}\n;// CONCATENATED MODULE: ./src/renderer/ui/announcements.tsx\nconst announcements_Logger=logger.create("Announcements");const[useAnnouncementsStore,AnnouncementsApi]=AnnouncementsStore;const patchClassNames=function(){const noticeClasses=webpack.findByProps("notice","colorDefault","buttonMinor");if(noticeClasses.notice.indexOf("powercord-announcement"))return;noticeClasses.notice+=" powercord-announcement"};const patchNoticeContainer=async function(){const{base}=webpack.findByProps("base","container")??{base:"pc-not-found"};const instance=getOwnerInstance(await waitFor(`.${base.split(" ")[0]}`));Patcher.after("pc-compat-notices",instance?.props?.children,"type",(_,args,res)=>{try{const{children}=findInReactTree(res,r=>r.className===base);children.unshift(React.createElement(AnnouncementContainer,{store:useAnnouncementsStore}))}catch(error){return announcements_Logger.error(error)}});instance.forceUpdate()};promise.then(()=>{patchClassNames();patchNoticeContainer();events.addEventListener("reload-core",()=>{Patcher.unpatchAll("pc-compat-notices")})}).catch(error=>{announcements_Logger.error("Failed to initialize:",error)});function sendAnnouncement(id,options){const state=AnnouncementsApi.getState();if(state.elements[id])throw`Announcement with id ${id} already exists!`;AnnouncementsApi.setState({...state,elements:{...state.elements,[id]:{...options,id}}})}function closeAnnouncement(id){const state=AnnouncementsApi.getState();if(!state.elements[id])return false;delete state.elements[id];AnnouncementsApi.setState(Object.assign({},state))}\n;// CONCATENATED MODULE: ./src/renderer/powercord/api/notices.ts\nfunction sendToast(id,options){return Notices.show(Object.assign(options,{id}))}function closeToast(id){return Notices.close(id)}\n;// CONCATENATED MODULE: ./src/renderer/powercord/api/connections.ts\nfunction fetchAccounts(){return Promise.resolve([])}const connections=[];const filter=()=>[];const map=()=>[];function registerConnection(){}function unregisterConnection(){}function get(){return null}\n;// CONCATENATED MODULE: ./src/renderer/powercord/api/index.ts\n\n;// CONCATENATED MODULE: ./src/renderer/node/events.ts\nconst events_Logger=logger.create("Events");class EventEmitter{static get EventEmitter(){return EventEmitter}static get defaultMaxListeners(){return 10}constructor(){this.maxListeners=EventEmitter.defaultMaxListeners;this.events={newListener:new Set()}}setMaxListeners(count){if(typeof count!=="number"||count<0||Number.isNaN(count))throw new Error(`Invalid argument for "count": ${count}`);this.maxListeners=count;return this}emit(event,...args){if(!this.events[event])return this;for(const[index,listener]of this.events[event].entries()){try{listener(...args)}catch(error){events_Logger.error("Emitter",`Cannot fire listener for event ${event} at position ${index}:`,error)}}return this}off(event,callback){if(!this.events[event])return;this.events[event].delete(callback);return this}on(event,callback){if(!this.events[event])this.events[event]=new Set();this.emit("newListener",event,callback);this.events[event].add(callback);return this}once(event,callback){const wrapped=(...args)=>{this.off(event,wrapped);return Reflect.apply(callback,null,args)};this.on(event,callback);return this}removeAllListeners(event){if(this.events[event]){this.events[event].clear()}return this}listenerCount(eventName){return this.events[eventName]?.size??0}getMaxListeners(){return this.maxListeners}eventNames(){return Reflect.ownKeys(this.events)}get removeListener(){return this.off}get addListener(){return this.on}}\n;// CONCATENATED MODULE: ./src/renderer/node/https.ts\nfunction https_get(url,options,res){if(typeof options==="function"){res=options;options=void 0}const id="HTTPS_GET_"+Math.random().toString(36).slice(2);const emitter=new EventEmitter();PCCompatNative.IPC.on(id,(event,...args)=>{if(event==="__data"){return Object.assign(emitter,...args)}if(args[0]instanceof Uint8Array){args[0].toString=()=>String.fromCharCode(...args[0])}if(event==="end"){Object.assign(emitter,args[0])}emitter.emit(event,...args)});Object.assign(emitter,{end:()=>void 0});const args1=[url,options].filter(Boolean).map(e=>JSON.stringify(e)).join(", ");PCCompatNative.executeJS(`\n        require("https").get(${args1}, (res) => {\n            for (const event of ["end", "data", "close"]) {\n                res.on(event, (...args) => {\n                    if (event === "end") {\n                        args.push(Object.fromEntries(["statusCode", "statusMessage", "url", "headers", "method", "aborted", "complete", "rawHeaders", "end"].map(e => [e, res[e]])));\n                    }\n\n                    PCCompatNative.IPC.dispatch(${JSON.stringify(id)}, event, ...args);\n\n                    if (event === "close") {\n                        delete PCCompatEvents[${JSON.stringify(id)}];\n                    }\n                });\n            }\n        });\n    `);return res(emitter),emitter}function request(...args){return Reflect.apply(https_get,this,arguments)}function createServer(){return DiscordNative.nativeModules.requireModule("discord_rpc").RPCWebSocket.http.createServer.apply(this,arguments)}\n;// CONCATENATED MODULE: ./src/renderer/node/http.ts\nfunction http_get(url,options,res){if(typeof options==="function"){res=options;options=void 0}const id="HTTPS_GET_"+Math.random().toString(36).slice(2);const emitter=new EventEmitter();PCCompatNative.IPC.on(id,(event,...args)=>{if(event==="__data"){return Object.assign(emitter,...args)}if(args[0]instanceof Uint8Array){args[0].toString=()=>String.fromCharCode(...args[0])}if(event==="end"){Object.assign(emitter,args[0])}emitter.emit(event,...args)});Object.assign(emitter,{end:()=>void 0});const args1=[url,options].filter(Boolean).map(e=>JSON.stringify(e)).join(", ");PCCompatNative.executeJS(`\n        require("http").get(${args1}, (res) => {\n            for (const event of ["end", "data", "close"]) {\n                res.on(event, (...args) => {\n                    if (event === "end") {\n                        args.push(Object.fromEntries(["statusCode", "statusMessage", "url", "headers", "method", "aborted", "complete", "rawHeaders", "end"].map(e => [e, res[e]])));\n                    }\n\n                    PCCompatNative.IPC.dispatch(${JSON.stringify(id)}, event, ...args);\n\n                    if (event === "close") {\n                        delete PCCompatEvents[${JSON.stringify(id)}];\n                    }\n                });\n            }\n        });\n    `);return res(emitter),emitter}function http_request(...args){return Reflect.apply(http_get,this,arguments)}function http_createServer(){return DiscordNative.nativeModules.requireModule("discord_rpc").RPCWebSocket.http.createServer.apply(this,arguments)}\n;// CONCATENATED MODULE: ./src/renderer/node/querystring.ts\nconst querystring=PCCompatNative.executeJS(`require("querystring")`);/* harmony default export */ const node_querystring = (querystring);\n;// CONCATENATED MODULE: ./src/renderer/node/url.ts\n/* harmony default export */ const url = ({parse:(...args)=>PCCompatNative.executeJS(`\n        PCCompatNative.cloneObject(require("url").parse(${args.map(e=>JSON.stringify(e)).join(", ")}));\n    `)});\n;// CONCATENATED MODULE: ./src/renderer/powercord/http/GenericRequest.ts\nconst GenericRequest_Logger=logger.create("HTTP");class HTTPError extends Error{constructor(message,res){super(message);Object.assign(this,res);this.name=this.constructor.name}}class GenericRequest{constructor(method,uri){this.opts={method,uri,query:{},headers:{"User-Agent":navigator.userAgent}}}_objectify(key,value){return key instanceof Object?key:{[key]:value}}query(key,value){Object.assign(this.opts.query,this._objectify(key,value));return this}set(key,value){Object.assign(this.opts.headers,this._objectify(key,value));return this}send(data){if(data instanceof Object){const serialize=this.opts.headers["Content-Type"]==="application/x-www-form-urlencoded"?node_querystring.encode:JSON.stringify;this.opts.data=serialize(data)}else{this.opts.data=data}return this}execute(){return new Promise((resolve,reject)=>{const opts=Object.assign({},this.opts);GenericRequest_Logger.debug("Performing request to",opts.uri);const{request}=opts.uri.startsWith("https")?https_namespaceObject:http_namespaceObject;if(Object.keys(opts.query)[0]){opts.uri+=`?${node_querystring.encode(opts.query)}`}const options=Object.assign({},opts,url.parse(opts.uri));const req=request(options,res=>{const data=[];res.on("data",chunk=>{data.push(chunk)});res.once("error",reject);res.once("end",()=>{const raw=Buffer.concat(data);const result={raw,body:(()=>{if(/application\\/json/.test(res.headers["content-type"])){try{return JSON.parse(raw)}catch(_){}}return raw})(),ok:res.statusCode>=200&&res.statusCode<400,statusCode:res.statusCode,statusText:res.statusMessage,headers:res.headers};if(result.ok){resolve(result)}else{reject(new HTTPError(`${res.statusCode} ${res.statusMessage}`,result))}})});req.once("error",reject);if(this.opts.data){req.write(this.opts.data)}req.end()})}then(resolver,rejector){if(this._res){return this._res.then(resolver,rejector)}return this._res=this.execute().then(resolver,rejector)}catch(rejector){return this.then(null,rejector)}}/* harmony default export */ const http_GenericRequest = (GenericRequest);\n;// CONCATENATED MODULE: ./src/renderer/powercord/http/index.ts\n/* harmony default export */ const http = ({get(url){return new http_GenericRequest("GET",url)},post(url){return new http_GenericRequest("POST",url)},patch(url){return new http_GenericRequest("PATCH",url)},put(url){return new http_GenericRequest("PUT",url)},del(url){return new http_GenericRequest("DELETE",url)},head(url){return new http_GenericRequest("HEAD",url)}});\n;// CONCATENATED MODULE: ./src/renderer/powercord/constants.ts\nconst constants={WEBSITE:\'https://github.com/strencher-kernel/pc-compat\',I18N_WEBSITE:\'https://example.com\',REPO_URL:\'strencher-kernel/pc-compat\',SETTINGS_FOLDER:node_path.resolve(PCCompatNative.getBasePath(),\'config\'),CACHE_FOLDER:null,LOGS_FOLDER:null,DISCORD_INVITE:\'8mPTjTZ4SZ\',GUILD_ID:\'891039687785996328\',SpecialChannels:{KNOWN_ISSUES:\'891039688352219198\',SUPPORT_INSTALLATION:\'891053581136982056\',SUPPORT_PLUGINS:\'891053581136982056\',SUPPORT_MISC:\'891053581136982056\',STORE_PLUGINS:\'649571600764633088\',STORE_THEMES:\'649571547350302741\',CSS_SNIPPETS:\'755005803303403570\',JS_SNIPPETS:\'896214131525443635\'}};/* harmony default export */ const powercord_constants = (constants);\n;// CONCATENATED MODULE: ./src/common/ipcevents.ts\nconst MAIN_EVENT="pccompat-main-event";const COMPILE_SASS="pccompat-compile-sass";const COMPILE_JSX="pccompat-compile-jsx";const GET_APP_PATH="pccompat-get-app-path";const SET_DEV_TOOLS="pccompat-open-devtools";const GET_WINDOW_DATA="pccompat-get-window-data";const EXPOSE_PROCESS_GLOBAL="pccompat-expose-process-global";const HANDLE_CALLBACK="pccompat-handle-callback"\n;// CONCATENATED MODULE: ./src/renderer/powercord/compilers/scss.ts\nclass SASS{static compile(file){return node_electron.ipcRenderer.sendSync(COMPILE_SASS,file)}}\n;// CONCATENATED MODULE: ./src/renderer/powercord/compilers/jsx.ts\nclass JSXCompiler{static compile(file){return node_electron.ipcRenderer.sendSync(COMPILE_JSX,file)}}\n;// CONCATENATED MODULE: ./src/renderer/powercord/compilers/index.ts\n\n;// CONCATENATED MODULE: ./src/renderer/powercord/index.ts\nlet initialized=false;webpack.whenReady.then(()=>{initialized=true});const account=null;function fetchAccount(){return null}function once(event,callback){switch(event){case"loaded":{return webpack.whenReady.then(callback)}}}function toggleDeveloper(){const devMode=datastore.getMisc("developerMode",false);datastore.setMisc(void 0,"developerMode",!devMode)}\n;// CONCATENATED MODULE: ./src/renderer/node/os.ts\nconst os=PCCompatNative.executeJS(`require("os")`);/* harmony default export */ const node_os = (os);\n;// CONCATENATED MODULE: ./src/renderer/node/util.ts\nconst util=PCCompatNative.executeJS(`require("util")`);/* harmony default export */ const node_util = (util);\n;// CONCATENATED MODULE: ./src/renderer/node/zlib.ts\nconst zlib=PCCompatNative.executeJS(`require("zlib")`);/* harmony default export */ const node_zlib = (zlib);\n;// CONCATENATED MODULE: ./src/renderer/node/stream.ts\nconst methods=PCCompatNative.executeJS(`Object.keys(require("stream"))`);const stream={};for(const key of methods){stream[key]=PCCompatNative.executeJS(`require("stream").${key}`)}/* harmony default export */ const node_stream = (stream);\n;// CONCATENATED MODULE: ./src/renderer/node/crypto.ts\nconst crypto_methods=PCCompatNative.executeJS(`Object.keys(require("crypto"))`);const crypto_crypto={};for(const key of crypto_methods){crypto_crypto[key]=PCCompatNative.executeJS(`require("crypto").${key}`)}/* harmony default export */ const node_crypto = (crypto_crypto);\n;// CONCATENATED MODULE: ./src/renderer/node/net.ts\nconst net_methods=PCCompatNative.executeJS(`Object.keys(require("net"))`);const net={};for(const key of net_methods){net[key]=PCCompatNative.executeJS(`require("net").${key}`)}/* harmony default export */ const node_net = (net);\n;// CONCATENATED MODULE: ./src/renderer/node/tls.ts\nconst tls_methods=PCCompatNative.executeJS(`Object.keys(require("tls"))`);const tls={};for(const key of tls_methods){tls[key]=PCCompatNative.executeJS(`require("tls").${key}`)}/* harmony default export */ const node_tls = (tls);\n;// CONCATENATED MODULE: ./src/renderer/node/buffer.ts\nconst buffer_Buffer={};const setBuffer=function(buffer){Object.assign(buffer_Buffer,buffer);window.Buffer=buffer.Buffer};/* harmony default export */ const buffer = (buffer_Buffer);\n;// CONCATENATED MODULE: ./src/renderer/node/module.ts\nconst module_cache={};const nodeGlobals=["require","module","exports","__filename","__dirname","global"].join(", ");const globalPaths=[node_path.resolve(PCCompatNative.getBasePath(),"node_modules")];const extensions={".js":(module,filename)=>{const fileContent=fs.readFileSync(filename,"utf8");module._compile(fileContent);return module.exports},".json":(module,filename)=>{const filecontent=fs.readFileSync(filename,"utf8");module.exports=JSON.parse(filecontent);return module.exports},".jsx":(module,filename)=>{const code=JSXCompiler.compile(filename);module.filecontent=code;module._compile(code,filename);return module.exports},".scss":(module,filename)=>{const content=SASS.compile(filename);module.exports=content;return content},".css":(module,filename)=>{const content=fs.readFileSync(filename,"utf8");module.exports=content;return module.exports},".node":(module,filename)=>{const thing=PCCompatNative.executeJS(`require(${JSON.stringify(filename)})`);module.exports=thing;return thing}};class Module{constructor(id,parent){this.id=id;this.path=node_path.dirname(id);this.exports={};this.parent=parent;this.filename=id;this.loaded=false;this.children=[];if(parent)parent.children.push(this)}_compile(code){const wrapped=window.eval(`(function (${nodeGlobals}) {\n            ${code}\n            //# sourceURL=${JSON.stringify(this.filename).slice(1,-1)}\n        })`);wrapped(this.require,this,this.exports,this.filename,this.path,window)}}function resolve(path1){for(const key in module_cache){if(key.startsWith(path1))return key}}function createRequire(_path,parent){const require=mod=>{if(typeof mod!=="string")return;if(~mod.indexOf("pc-settings/components/ErrorBoundary"))return errorboundary;switch(mod){case"powercord":return powercord_namespaceObject;case"path":return node_path;case"fs":return fs;case"module":return NodeModule;case"process":return window.process;case"electron":return node_electron;case"https":return https_namespaceObject;case"http":return http_namespaceObject;case"react":return discord.React;case"react-dom":return discord.ReactDOM;case"events":return EventEmitter;case"os":return node_os;case"util":return node_util;case"zlib":return node_zlib;case"stream":return node_stream;case"querystring":return node_querystring;case"url":return url;case"net":return node_net;case"tls":return node_tls;case"crypto":return node_crypto;case"buffer":return buffer;default:{if(mod.startsWith("powercord/")){const value1=mod.split("/").slice(1).filter(Boolean).reduce((value,key)=>value[key],powercord_namespaceObject);if(value1)return value1}return load(_path,mod,parent)}}};Object.assign(require,{cache: module_cache,resolve});return require}function hasExtension(mod){return Boolean(extensions[node_path.extname(mod)])}function getExtension(mod){return node_path.extname(mod)||Object.keys(extensions).find(ext=>fs.existsSync(mod+ext))||""}function collectPNPMStores(node_modules){const store=node_path.join(node_modules,".pnpm");if(!fs.existsSync(store)||!fs.statSync(store).isDirectory())return[];const result=[];for(const file of fs.readdirSync(store,"utf8")){const fullPath=node_path.join(store,file,"node_modules");if(fs.existsSync(fullPath))result.push(fullPath)}return result}function resolveGlobalPath(mod,globalPaths1){const directMatch=globalPaths1.find(globalPath=>fs.existsSync(node_path.join(globalPath,mod)));if(directMatch)return directMatch;const withExtension=globalPaths1.find(globalPath=>getExtension(node_path.join(globalPath,mod)));if(withExtension)return withExtension;return""}function getGlobalPath(mod){const fromGlobals=resolveGlobalPath(mod,globalPaths);if(fromGlobals)return fromGlobals;const allPaths=globalPaths.flatMap(globalPath=>collectPNPMStores(globalPath));const fromPNPM=resolveGlobalPath(mod,allPaths);if(fromPNPM)return fromPNPM;return""}function getParent(_path,mod){const concatPath=node_path.resolve(_path,mod);if(fs.existsSync(concatPath))return concatPath;const globalPath=node_path.join(getGlobalPath(mod),mod);if(fs.existsSync(globalPath))return globalPath;return""}function resolveMain(_path,mod){const parent=hasExtension(_path)?node_path.dirname(_path):getParent(_path,mod);if(!fs.existsSync(parent))throw new Error(`Cannot find module ${mod}\\ntree:\\n\\r-${_path}`);const files=fs.readdirSync(parent,"utf8");for(const file of files){const ext=node_path.extname(file);if(file==="package.json"){const pkg=JSON.parse(fs.readFileSync(node_path.resolve(parent,file),"utf8"));if(!Reflect.has(pkg,"main"))continue;return node_path.resolve(parent,hasExtension(pkg.main)?pkg.main:pkg.main+getExtension(node_path.join(parent,pkg.main)))}if(file.slice(0,-ext.length)==="index"&&extensions[ext])return node_path.resolve(parent,file)}if(mod.startsWith("./"))return null;const globalMod=globalPaths.find(pth=>fs.existsSync(node_path.join(pth,mod)));if(globalMod)return resolveMain(globalMod,mod);return globalPaths.find(pth=>getExtension(node_path.join(pth,mod)))}function getFilePath(_path,mod){const combined=node_path.resolve(_path,mod);const pth=hasExtension(combined)?combined:combined+getExtension(combined);if(fs.existsSync(pth)&&fs.statSync(pth).isFile())return pth;if(!hasExtension(mod))return resolveMain(_path,mod);return mod}function load(_path,mod,req=null){const file=getFilePath(_path,mod);if(!fs.existsSync(file))throw new Error(`Cannot find module ${mod}\\ntree:\\n\\r-${_path}`);if(module_cache[file])return module_cache[file].exports;const stats=fs.statSync(file,"utf8");if(stats.isDirectory())mod=resolveMain(_path,mod);const ext=getExtension(file);const loader=extensions[ext];if(!loader)throw new Error(`Cannot find module ${file}`);const module=module_cache[file]=new Module(file,req);const require=createRequire(node_path.dirname(file),module);module.require=require;loader(module,file);return module.exports}const NodeModule={_extensions:extensions,cache: module_cache,_load:load,globalPaths:globalPaths};if(window.process&&!window.process.contextIsolated){const Module=window.require("module");const oldLoad=Module._load;Module._load=function(mod){if(mod==="powercord"){return powercord_namespaceObject}else if(~mod.indexOf("pc-settings/components/ErrorBoundary")){return errorboundary}else if(mod.startsWith("powercord/")){const value4=mod.split("/").slice(1).filter(Boolean).reduce((value,key)=>value[key],powercord_namespaceObject);if(value4)return value4}return Reflect.apply(oldLoad,this,arguments)};const _extensions=[".jsx",".scss",".css"];for(const ext of _extensions){Module._extensions[ext]=extensions[ext]}Module.globalPaths.push(node_path.resolve(PCCompatNative.getBasePath(),"node_modules"));console.log("Pushed.")}/* harmony default export */ const node_module = (!window.process||process.contextIsolated?NodeModule:window.require("module"));\n;// CONCATENATED MODULE: ./src/renderer/node/require.ts\nif(!window.process){try{PCCompatNative.IPC.dispatch(EXPOSE_PROCESS_GLOBAL)}catch(error){console.error(error)}}const require_require=process.contextIsolated?createRequire(node_path.resolve(PCCompatNative.getBasePath(),"plugins"),null):window.require;const modulesToInitialize=[process.contextIsolated&&["buffer/",setBuffer]].filter(Boolean);for(let i=0;i<modulesToInitialize.length;i++){const[namespace,load]=modulesToInitialize[i];try{console.log("Require.",[...require_require("module").globalPaths]);load(require_require(namespace))}catch(error){console.error(`Failed to require "${namespace}":`,error)}}/* harmony default export */ const node_require = (require_require);\n;// CONCATENATED MODULE: ./src/renderer/modules/datastore.ts\nconst datastore_Logger=logger.create("DataStore");const DataStore=new class DataStore extends Store{constructor(){super();this.baseDir=node_path.resolve(PCCompatNative.getBasePath());this.configFolder=node_path.resolve(this.baseDir,"config");this.cache=new Map();if(!fs.existsSync(this.configFolder)){try{fs.mkdirSync(this.configFolder)}catch(error){datastore_Logger.error("Failed to create config folder:",error)}}}tryLoadData(name,def={}){const{Lodash}=discord;if(this.cache.has(name))return Lodash.merge({},def,this.cache.get(name));try{const location=node_path.resolve(this.configFolder,`${name}.json`);if(!fs.existsSync(location))return def;let data=node_require(location);if(Object.keys(data).length===0)return def;data=Lodash.merge({},def,data);this.cache.set(name,data);return data}catch(error){datastore_Logger.error(`Data of ${name} corrupt:`,error);return def}}trySaveData(name,data,emit,event="data-update"){this.cache.set(name,data);try{fs.writeFileSync(node_path.resolve(this.configFolder,`${name}.json`),JSON.stringify(data,null,"\\t"),"utf8")}catch(error){datastore_Logger.error(`Failed to save data of ${name}:`,error)}if(emit)this.emit(event,name,data)}getMisc(misc="",def){return getProps(this.tryLoadData("misc"),misc)??def}setMisc(misc=this.getMisc("",{}),prop,value){this.trySaveData("misc",_.set(misc,prop.split("."),value));this.emit("misc",misc,value)}};/* harmony default export */ const datastore = (DataStore);\n;// CONCATENATED MODULE: ./src/renderer/modules/index.ts\n\n;// CONCATENATED MODULE: ./src/renderer/ui/quickcss/components/editor.tsx\nfunction getLanguage(filename){if(!filename)return"";switch(node_path.extname(filename)){case".js":return"javascript";case".scss":case".sass":return"scss";case".css":return"css";default:return filename.slice(1)}}const editor_cache=new Map();function Editor1({filename,onChange}){const editorRef=discord.React.useRef();const containerRef=discord.React.useRef();const bindings=discord.React.useRef([]);discord.React.useEffect(()=>{if(!containerRef.current)return;const value1=fs.existsSync(filename)?editor_cache.has(filename)?editor_cache.get(filename):(editor_cache.set(filename,fs.readFileSync(filename,"utf8")),editor_cache.get(filename)):"";const Editor=editorRef.current=window.monaco.editor.create(containerRef.current,{value:value1,language:getLanguage(filename),theme:"vs-dark"});bindings.current.push(Editor.onDidChangeModelContent(()=>{const value=Editor.getValue();editor_cache.set(filename,value);onChange(value)}));return()=>{for(const binding of bindings.current)binding.dispose();Editor.dispose()}},[containerRef,editorRef,filename]);discord.React.useEffect(()=>{const listener=()=>{if(!editorRef.current)return;editorRef.current.layout()};discord.Dispatcher.subscribe("PCCOMPAT_UPDATE_POSITION",listener);return()=>{discord.Dispatcher.unsubscribe("PCCOMPAT_UPDATE_POSITION",listener)}});return React.createElement("div",{className:"pc-editor",ref:containerRef})}\n;// CONCATENATED MODULE: ./src/renderer/ui/quickcss/store.ts\nconst[usePanelStore,PanelAPI]=createStore({sidebarVisible:true,panel:"",selectedFile:null});\n;// CONCATENATED MODULE: ./src/renderer/ui/quickcss/util.ts\nconst quickcss_util_Logger=logger.create("QuickCSS:util");const filesPath=node_path.resolve(PCCompatNative.getBasePath(),"config","quickcss");const createStorage=function(){try{fs.mkdirSync(filesPath)}catch(error){quickcss_util_Logger.error("Failed to create QuickCSS folder:",error)}return[]};const getConfig=function(){return datastore.tryLoadData("quickcss",{files:[],states:{}})};const setConfig=function(items){const{Lodash}=discord;return datastore.trySaveData("quickcss",Lodash.merge({},getConfig(),items),true,"QUICK_CSS_UPDATE")};const getFiles=function(){return getConfig().files.filter(file=>fs.existsSync(file))};const closeFile=function(filepath){const config=getConfig();const index=config.files.indexOf(filepath);if(index<0)return;config.files.splice(index,1);datastore.trySaveData("quickcss",{...config})};const openFile=function(filepath){const config=getConfig();const index=config.files.indexOf(filepath);if(index> -1)return;config.files.push(filepath);datastore.trySaveData("quickcss",{...config})}\n;// CONCATENATED MODULE: ./src/renderer/ui/icons/folder-open.tsx\nfunction folder_open_extends(){folder_open_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return folder_open_extends.apply(this,arguments)}function FolderOpened(props){return React.createElement("svg",folder_open_extends({width:"24",height:"24",viewBox:"0 0 576 512"},props),React.createElement("path",{fill:"currentColor",d:"M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z"}))}\n;// CONCATENATED MODULE: ./src/renderer/ui/icons/folder.tsx\nfunction folder_extends(){folder_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return folder_extends.apply(this,arguments)}function Folder(props){return React.createElement("svg",folder_extends({width:"24",height:"24",viewBox:"0 0 512 512"},props),React.createElement("path",{fill:"currentColor",d:"M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z"}))}\n;// CONCATENATED MODULE: ./src/renderer/ui/icons/paint-brush.tsx\nfunction paint_brush_extends(){paint_brush_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return paint_brush_extends.apply(this,arguments)}function PaintBrush(props){return React.createElement("svg",paint_brush_extends({width:"24",height:"24",viewBox:"0 0 512 512"},props),React.createElement("path",{fill:"currentColor",d:"M167.02 309.34c-40.12 2.58-76.53 17.86-97.19 72.3-2.35 6.21-8 9.98-14.59 9.98-11.11 0-45.46-27.67-55.25-34.35C0 439.62 37.93 512 128 512c75.86 0 128-43.77 128-120.19 0-3.11-.65-6.08-.97-9.13l-88.01-73.34zM457.89 0c-15.16 0-29.37 6.71-40.21 16.45C213.27 199.05 192 203.34 192 257.09c0 13.7 3.25 26.76 8.73 38.7l63.82 53.18c7.21 1.8 14.64 3.03 22.39 3.03 62.11 0 98.11-45.47 211.16-256.46 7.38-14.35 13.9-29.85 13.9-45.99C512 20.64 486 0 457.89 0z"}))}\n;// CONCATENATED MODULE: ./src/renderer/ui/icons/save.tsx\nfunction save_extends(){save_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return save_extends.apply(this,arguments)}function Save(props){return React.createElement("svg",save_extends({width:"24",height:"24",viewBox:"0 0 448 512"},props),React.createElement("path",{fill:"currentColor",d:"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"}))}\n;// CONCATENATED MODULE: ./src/renderer/ui/icons/verified_shield.tsx\nfunction verified_shield_extends(){verified_shield_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return verified_shield_extends.apply(this,arguments)}function VerifiedShield(props){return React.createElement("svg",verified_shield_extends({xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},props),React.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),React.createElement("path",{d:"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z",fill:"currentColor"}))}\n;// CONCATENATED MODULE: ./src/renderer/ui/icons/sass.tsx\nfunction sass_extends(){sass_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return sass_extends.apply(this,arguments)}function Sass(props){return React.createElement("svg",sass_extends({width:"24",height:"24",viewBox:"0 0 500 500",xmlSpace:"preserve",xmlns:"http://www.w3.org/2000/svg"},props),React.createElement("path",{d:"M419.047 96.227C406.855 48.39 327.54 32.67 252.472 59.336c-44.68 15.876-93.029 40.785-127.81 73.31-41.349 38.675-47.943 72.329-45.216 86.396 9.583 49.621 77.585 82.068 105.535 106.125v.144c-8.246 4.051-68.565 34.585-82.684 65.8-14.893 32.932 2.372 56.556 13.804 59.742 35.424 9.858 71.765-7.866 91.312-37.01 18.852-28.12 17.279-64.422 9.085-82.488 11.3-2.976 24.476-4.313 41.218-2.36 47.248 5.52 56.517 35.017 54.747 47.367s-11.681 19.14-14.998 21.185-4.326 2.767-4.05 4.287c.406 2.216 1.94 2.137 4.758 1.652 3.894-.655 24.804-10.042 25.709-32.827 1.14-28.934-26.587-61.302-75.684-60.45-20.216.354-32.933 2.268-42.123 5.69-.681-.774-1.363-1.548-2.084-2.308-30.35-32.382-86.46-55.285-84.088-98.823.866-15.824 6.372-57.5 107.817-108.053 83.104-41.414 149.638-30.009 161.135-4.759 16.427 36.079-35.554 103.137-121.857 112.812-32.88 3.684-50.199-9.06-54.499-13.805-4.536-4.995-5.204-5.218-6.909-4.287-2.753 1.534-1.01 5.939 0 8.574 2.583 6.712 13.15 18.603 31.176 24.516 15.863 5.204 54.459 8.062 101.157-9.99 52.282-20.255 93.12-76.523 81.124-123.549zM196.584 339.995c3.92 14.5 3.487 28.016-.564 40.247a65.289 65.289 0 0 1-3.225 7.97c-3.12 6.477-7.315 12.534-12.441 18.132-15.654 17.07-37.508 23.533-46.882 18.092-10.12-5.873-5.047-29.943 13.084-49.11 19.52-20.635 47.602-33.902 47.602-33.902l-.039-.08 2.465-1.35z",fill:"#ec407a",stroke:"#ec407a","stroke-width":"16.286552999999998"}))}\n;// CONCATENATED MODULE: ./src/renderer/ui/icons/css.tsx\nfunction css_extends(){css_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return css_extends.apply(this,arguments)}function Css(props){return React.createElement("svg",css_extends({width:"24",height:"24",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},props),React.createElement("path",{d:"m5 3-.65 3.34h13.59L17.5 8.5H3.92l-.66 3.33h13.59l-.76 3.81-5.48 1.81-4.75-1.81.33-1.64H2.85l-.79 4 7.85 3 9.05-3 1.2-6.03.24-1.21L21.94 3H5z",fill:"#42a5f5"}))}\n;// CONCATENATED MODULE: ./src/renderer/ui/icons/warning_shield.tsx\nfunction warning_shield_extends(){warning_shield_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return warning_shield_extends.apply(this,arguments)}function WarningShield(props){return React.createElement("svg",warning_shield_extends({xmlns:"http://www.w3.org/2000/svg","enable-background":"new 0 0 24 24",height:"24",viewBox:"0 0 24 24",width:"24"},props),React.createElement("g",null,React.createElement("path",{d:"M0,0h24v24H0V0z",fill:"none"})),React.createElement("g",null,React.createElement("path",{d:"M12,2L4,5v6.09c0,5.05,3.41,9.76,8,10.91c4.59-1.15,8-5.86,8-10.91V5L12,2z M13,16h-2v-2h2V16z M13,12h-2V7h2V12z",fill:"currentColor"})))}\n;// CONCATENATED MODULE: ./src/renderer/ui/icons/index.tsx\nfunction icons_extends(){icons_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return icons_extends.apply(this,arguments)}const Icons={FolderOpened: FolderOpened,Folder: Folder,PaintBrush: PaintBrush,Save: Save,VerifiedShield: VerifiedShield,Sass: Sass,Css: Css,WarningShield: WarningShield};function icons_Icon({name,...props}){const IconComponent=Icons[name];let extraProps={};if(!IconComponent)return null;if(props.size){extraProps.width=extraProps.height=props.size}return React.createElement(IconComponent,icons_extends({},props,extraProps))}\n;// CONCATENATED MODULE: ./src/renderer/ui/quickcss/components/fileicon.tsx\nfunction fileicon_extends(){fileicon_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return fileicon_extends.apply(this,arguments)}function FileIcon({ext,...props}){switch(ext){case".scss":case".sass":return React.createElement(Sass,fileicon_extends({},props));case".css":return React.createElement(Css,fileicon_extends({},props));default:return null}}\n;// CONCATENATED MODULE: ./src/renderer/ui/quickcss/components/sidebar.tsx\nfunction sidebar_extends(){sidebar_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return sidebar_extends.apply(this,arguments)}const sidebar_Logger=logger.create("QuickCSS");function SideBarButton({label,icon,selected,onClick,className=""}){const{Tooltips}=discord;return React.createElement("div",{className:joinClassNames("pc-quickcss-sidebar-icon",[selected,"pc-quickcss-selected"],className),onClick:onClick,key:label},React.createElement(Tooltips.Tooltip,{text:label,position:"right"},props=>typeof icon==="string"?React.createElement(icons_Icon,sidebar_extends({name:icon},props)):React.createElement(icon,props)))}function SideBarFile({filepath,selected}){return React.createElement("div",{className:joinClassNames("pc-quickcss-sidebar-files-file",[selected,"pc-quickcss-selected"]),onClick:()=>{if(selected)return;openFile(filepath);PanelAPI.setState({selectedFile:filepath})},key:filepath},React.createElement(FileIcon,{ext:node_path.extname(filepath),width:"16",height:"16"}),React.createElement("div",{className:"pc-quickcss-filename"},node_path.basename(filepath)))}function ControlButton({label,action,children:icon}){const{Tooltips,Button}=discord;return React.createElement(Tooltips.Tooltip,{text:label},props=>React.createElement(Button,sidebar_extends({},props,{className:"pc-quickcss-controlbutton",onClick:action,look:Button.Looks.BLANK,size:Button.Sizes.NONE}),icon))}function SideBar(){const state=usePanelStore();const files=(fs.existsSync(filesPath)?fs.readdirSync(filesPath,"utf8"):createStorage()).map(file=>node_path.resolve(filesPath,file));const handleSaveFile=function(){if(!editor_cache.has(state.selectedFile))return;fs.writeFileSync(state.selectedFile,editor_cache.get(state.selectedFile),"utf8");datastore.emit("QUICK_CSS_UPDATE",state.selectedFile);powercord.api.notices.sendToast(null,{content:"Your changes to the current file were saved.",header:"Changes saved",type:"success",timeout:1500})};const handleCreateFile=function(){Modals.prompt("Create File","Filename of the file you want to create",{onInput:value=>{try{const location=node_path.resolve(filesPath,value);fs.writeFileSync(location,"","utf8");PanelAPI.setState({selectedFile:location})}catch(error){sidebar_Logger.error("QuickCSS","Failed to create file "+value,error)}}})};return React.createElement("div",{className:joinClassNames("pc-quickcss-sidebar",[state.sidebarVisible,"pc-visible"])},React.createElement("div",{className:"pc-quickcss-sidebar-iconsrow"},React.createElement(SideBarButton,{label:"Files",key:"FILES",selected:state.panel==="files",icon:state.panel==="files"&&state.sidebarVisible?"FolderOpened":"Folder",onClick:()=>{if(state.panel==="files"){PanelAPI.setState({sidebarVisible:!state.sidebarVisible});setImmediate(()=>{discord.Dispatcher.dirtyDispatch({type:"PCCOMPAT_UPDATE_POSITION"})})}else{PanelAPI.setState({panel:"files"})}}}),React.createElement(SideBarButton,{label:"Snippets",key:"SNIPPETS",selected:state.panel==="snippets",icon:"PaintBrush",onClick:()=>{PanelAPI.setState({panel:"snippets"})}}),React.createElement(SideBarButton,{label:"Settings",key:"SETTINGS",icon:props=>React.createElement(DiscordIcon,sidebar_extends({name:"Gear"},props)),selected:state.panel==="settings",className:"pc-align-bottom",onClick:()=>{PanelAPI.setState({panel:"settings"})}})),state.panel==="files"&&React.createElement("div",{className:"pc-quickcss-sidebar-content"},React.createElement("div",{className:"pc-quickcss-controls"},React.createElement(ControlButton,{label:"Save",action:handleSaveFile},React.createElement(icons_Icon,{name:"Save"})),React.createElement(ControlButton,{label:"Create File",action:handleCreateFile},React.createElement(DiscordIcon,{name:"Plus"}))),files.map(file=>React.createElement(SideBarFile,{key:file,filepath:file,selected:state.selectedFile===file}))))}\n;// CONCATENATED MODULE: ./src/renderer/ui/quickcss/components/snippets.tsx\nfunction Snippet({filepath}){const{Switch}=discord;const isEnabled=datastore.useEvent("QUICK_CSS_UPDATE",()=>{const config=getConfig();return config.states[filepath]??false});return React.createElement("div",{className:"pc-quickcss-snippet"},React.createElement("div",{className:"pc-quickcss-snippet-header"},React.createElement("div",{className:"pc-file-icon"},React.createElement(FileIcon,{ext:node_path.extname(filepath)})),React.createElement("div",{className:"pc-quickcss-snippet-name"},node_path.basename(filepath)),React.createElement("div",{className:"pc-quickcss-snippet-controls"},React.createElement(Switch,{checked:isEnabled,onChange:()=>{setConfig({states:{[filepath]:!isEnabled}})}}))))}function Snippets(){return React.createElement("div",{className:"pc-quickcss-panel pc-quickcss-snippets"},React.createElement("h3",{className:"pc-settings-title"},"Snippets"),getFiles().map(file=>React.createElement(Snippet,{filepath:file,key:file})))}\n;// CONCATENATED MODULE: ./src/renderer/ui/quickcss/components/panel.tsx\nconst Settings=[{type:"switch",name:"Example Setting",note:"Example.",value:true,id:"example"},{type:"switch",name:"Example Setting2",note:"Example 2.",value:false,id:"example2"}];function panel_SettingsPanel(){const{SwitchItem}=discord;return React.createElement("div",{className:"pc-quickcss-panel pc-quickcss-settings"},React.createElement("h3",{className:"pc-settings-title"},"Settings"),Settings.map(setting=>{switch(setting.type){case"switch":return React.createElement(SwitchItem,{key:setting.id,note:setting.note,value:setting.value,onChange:()=>{}},setting.name);default:return null}}))}function renderTopbarFile(filepath,selected){const{Button}=discord;const handleClick=function(){PanelAPI.setState({selectedFile:filepath})};return React.createElement("div",{className:joinClassNames("pc-quickcss-topbar-file",[selected,"pc-quickcss-selected"]),key:filepath,onClick:handleClick},React.createElement(Button,{size:Button.Sizes.NONE,look:Button.Looks.BLANK,className:"pc-quickcss-close",onClick:()=>{closeFile(filepath)}},React.createElement(DiscordIcon,{name:"Close"})),React.createElement("div",{className:"pc-quickcss-filename"},node_path.basename(filepath)))}function QuickCSSPanel(){const tabs=datastore.useEvent("data-update",()=>getFiles());const state=usePanelStore();return React.createElement("div",{className:"pc-quickcss"},React.createElement(SideBar,null),React.createElement("div",{className:"pc-quickcss-content"},(()=>{switch(state.panel){case"files":return[React.createElement("div",{className:"pc-quickcss-topbar"},tabs.map(tab=>renderTopbarFile(tab,state.selectedFile===tab))),state.selectedFile?React.createElement(Editor1,{filename:state.selectedFile,onChange:value=>{}}):React.createElement("p",{className:"pc-quickcss-notice"},"Open a File and start editing.")];case"snippets":return React.createElement(Snippets,null);case"settings":return React.createElement(panel_SettingsPanel,null);default:return React.createElement("p",{className:"pc-quickcss-notice"},"Welcome to PCCompat\'s QuickCSS editor.")}})()))}\n;// CONCATENATED MODULE: ./src/renderer/ui/quickcss/index.ts\nconst quickcss_Logger=logger.create("QuickCSS");class QuickCSS{static async initialize(){const{Lodash}=discord;Lodash.bindAll(this,["onDataUpdate"]);modules_settings.registerPanel("CustomCSS",{label:"Quick CSS",render:()=>discord.React.createElement(QuickCSSPanel,{}),order:4});this.loadMonaco();datastore.on("QUICK_CSS_UPDATE",this.onDataUpdate);this.onDataUpdate()}static shouldCompile(file){return node_path.extname(file)!==".css"}static onDataUpdate(file){const files=file&&{[file]:true}||getConfig().states;for(const file1 in files){if(this.injectedFiles[file1]&&(file1||!files[file1]))this.injectedFiles[file1].destroy();if(!files[file1])continue;if(!fs.existsSync(file1)){closeFile(file1);continue}const code=this.shouldCompile(file1)?SASS.compile(file1):fs.readFileSync(file1,"utf8");const id=node_path.basename(file1).split(".").join("-");DOM.injectCSS(id,code);this.injectedFiles[file1]={destroy(){DOM.clearCSS(id)}}}}static async loadMonaco(){if(Reflect.has(window,"MonacoEnvironment"))return;Object.defineProperty(window,"MonacoEnvironment",{value:{getWorkerUrl(){const monacoLoader=`\n                        self.MonacoEnvironment = {baseUrl: ${JSON.stringify(MONACO_BASEURL)}};\n                    `;return`data:text/javascript;charset=utf-8,${encodeURIComponent(monacoLoader)}`}}});DOM.injectCSS(QuickCSS.name,`${MONACO_BASEURL}/vs/editor/editor.main.min.css`,{type:"URL",documentHead:true});const originalRequire=window.require;await DOM.injectJS("monaco-script",`${MONACO_BASEURL}/vs/loader.min.js`,{documentHead:true});const amdLoader=window.require;window.require=originalRequire;amdLoader.config({paths:{vs:`${MONACO_BASEURL}/vs`}});amdLoader(["vs/editor/editor.main"],()=>{});quickcss_Logger.log("Module loaded!")}static dispose(){datastore.off("data-update",this.onDataUpdate)}}QuickCSS.injectedFiles={};\n;// CONCATENATED MODULE: ./index.json\nconst index_namespaceObject = JSON.parse(\'{"i8":"1.3.0-dev","VI":[{"type":"ADDED","title":"Added","items":["Added splash screen theming.","Added plugin reloading."]},{"type":"FIXED","title":"Fixes","items":["Fixed commands entirely, should now work fine again."]}]}\');\n;// CONCATENATED MODULE: ./src/renderer/ui/index.ts\n\n;// CONCATENATED MODULE: ./src/renderer/modules/simplegit.ts\nconst period="@@@===@@@";const commitFields=["hash","hash_short","author","date","message"];const hashFields=["short","full"];class Git{static async executeCmd(cmd,cwd){return new Promise((resolve,reject)=>{const id="GIT_CMD_"+Math.random().toString(36).slice(2);PCCompatNative.IPC.on(id,(error,res)=>{if(error)reject(error);else resolve(res)});PCCompatNative.executeJS(`void require("child_process").exec(${JSON.stringify(cmd)}, {\n                cwd: ${JSON.stringify(cwd)}\n            }, (error, res) => {\n                PCCompatNative.IPC.dispatch(${JSON.stringify(id)}, error, res);\n                delete PCCompatEvents[${JSON.stringify(id)}];\n            })`)})}static async hasGitInstalled(){try{await this.executeCmd("git --version");return true}catch{return false}}static async isGitRepo(cwd){try{const result=await this.executeCmd("git rev-parse --is-inside-work-tree",cwd);return result==="true"}catch{return false}}static async getBranchName(cwd){try{const result=await this.executeCmd("git branch -a",cwd);if(!result)return null;return result.slice(2,result.indexOf("\\n"))}catch(error){console.error(error);return null}}static async getLatestCommit(cwd,target="master"){try{return this.parsePeriods(hashFields,await this.executeCmd(`git log -1 ${target} --pretty=format:"%h${period}%H"`,cwd))}catch(error){console.error(error);return{hasError:true}}}static async getDiff(cwd,target="master"){try{const result=await this.executeCmd(`git log ${target}..origin/${target} --pretty=format:"%H${period}%h${period}%an${period}%ar${period}%s"`,cwd);if(!result)return[];return result.split("\\n").map(p=>this.parsePeriods(commitFields,p))}catch(error){console.error(error);return[]}}static parsePeriods(fields,out){return Object.fromEntries(out.split(period).map((c,i)=>[fields[i],c]))}}\n;// CONCATENATED MODULE: ./src/renderer/ui/updater/store.ts\nconst UpdatesStore=createStore({})\n;// CONCATENATED MODULE: ./src/renderer/modules/makelazy.ts\nfunction makeLazy(factory,fallback){return function LazyComponent(props){const[state,setState]=React.useState({resolved:false,value:void 0});React.useEffect(()=>{if(state.resolved)return;factory(props).then(value=>{setState({value,resolved:true})})},[state]);return state.resolved?state.value:React.createElement(fallback,props)}}\n;// CONCATENATED MODULE: ./src/renderer/ui/updater/components/card.tsx\nconst[useUpdatesStore]=UpdatesStore;const basePath=PCCompatNative.getBasePath();const LoadingSpinner=()=>{return React.createElement(discord.Spinner,{type:discord.Spinner.Type.LOW_MOTION,className:"pc-spinner"})};const CurrentBranch=makeLazy(async()=>{const{Link}=discord;const branch=await Git.getBranchName(basePath);return React.createElement(Link,{href:`https://github.com/strencher-kernel/pc-compat/tree/${branch}`},branch)},LoadingSpinner);const CurrentCommitHash=makeLazy(async()=>{const{Text,Link}=discord;const hash=await Git.getLatestCommit(basePath,await Git.getBranchName(basePath));if(hash.hasError)return React.createElement(Text,{color:Text.Colors.RED},"error");return React.createElement(Link,{href:`https://github.com/strencher-kernel/pc-compat/tree/${hash.full}`},hash.short)},LoadingSpinner);const defaultInfo={latestUsedVersion:"0.0.0",lastCheckedUpdate:"---"};function UpdaterCard({hasPendingUpdates,onUpdate}){const{Flex,Text,Moment,Button}=discord;const updaterInfo=datastore.useEvent("updates",()=>{return datastore.tryLoadData("info",defaultInfo)},name=>name==="info");const isFetching=useUpdatesStore(u=>u.isFetching);const headerText=React.useMemo(()=>{if(isFetching)return"Fetching updates...";if(hasPendingUpdates)return"Something needs to be updated!";return"Everything is up to date."},[isFetching,updaterInfo,hasPendingUpdates]);const headerIcon=React.useMemo(()=>{if(isFetching)return React.createElement(DiscordIcon,{name:"UpdateAvailable",width:"70",height:"70",className:"pcu-shield"});return React.createElement(icons_Icon,{name:hasPendingUpdates?"WarningShield":"VerifiedShield",size:"70",className:joinClassNames("pcu-shield",hasPendingUpdates?"pcu-shield-warn":"pcu-shield-ok")})},[isFetching,updaterInfo,hasPendingUpdates]);return React.createElement(Flex,{className:"pcu-card",direction:Flex.Direction.VERTICAL},React.createElement(Flex,{justify:Flex.Justify.BETWEEN,align:Flex.Align.CENTER},React.createElement(Flex,{className:"pcu-shield-container",direction:Flex.Direction.HORIZONTAL,align:Flex.Align.START,justify:Flex.Justify.CENTER},headerIcon,React.createElement(Flex.Child,null,React.createElement(Text,{size:Text.Sizes.SIZE_24,color:Text.Colors.HEADER_PRIMARY},headerText),React.createElement(Text,{size:Text.Sizes.SIZE_14,color:Text.Colors.HEADER_SECONDARY},"Last Checked:",updaterInfo.lastCheckedUpdate!=="---"&&updaterInfo.lastCheckedUpdate!=null?" "+Moment(updaterInfo.lastCheckedUpdate).calendar():" "+updaterInfo.lastCheckedUpdate))),React.createElement("div",{className:"pcu-git-info"},React.createElement(Text,{className:"pcu-git-info-item"},"Branch: ",React.createElement(CurrentBranch,null)),React.createElement(Text,{className:"pcu-git-info-item"},"Commit: ",React.createElement(CurrentCommitHash,null)))),React.createElement(divider,null),React.createElement(Flex,{direction:Flex.Direction.HORIZONTAL},React.createElement(Button,{disabled:isFetching,color:Button.Colors.BRAND,size:Button.Sizes.SMALL,onClick:onUpdate},"Check for Updates")))}\n;// CONCATENATED MODULE: ./src/renderer/ui/updater/components/panel.tsx\nconst[panel_useUpdatesStore,UpdatesApi]=UpdatesStore;const panel_basePath=PCCompatNative.getBasePath();function useCommitDiff(){const[diff,setDiff]=React.useState([]);React.useEffect(()=>{Git.getBranchName(panel_basePath).then(branch=>{Git.getDiff(panel_basePath,branch).then(setDiff)})},[]);return diff}function UpdaterPanel(){const commitDiff=useCommitDiff();const handleFetchStart=function(){UpdatesApi.setState({isFetching:true});setTimeout(()=>{const data=datastore.tryLoadData("info",{});UpdatesApi.setState({isFetching:false});datastore.trySaveData("info",{...data,lastCheckedUpdate:new Date().toJSON()},true,"updates")},5e3)};return React.createElement("div",null,React.createElement(UpdaterCard,{hasPendingUpdates:commitDiff.length>0,onUpdate:handleFetchStart}))}\n;// CONCATENATED MODULE: ./src/renderer/ui/updater/index.tsx\nconst updater_Logger=new logger("Updater");class Updater{static getName(){return this.constructor.name}static initialize(){modules_settings.registerPanel("pc-updater",{label:"Updater",order:3,predicate(){return datastore.getMisc("developerMode",false)},render:()=>React.createElement(UpdaterPanel,null)})}static patchPanelButton(){const{Messages}=discord.LocaleManager;const PanelButton=webpack.findByDisplayName("PanelButton",{default:true});Patcher.after(this.getName(),PanelButton,"default",(_,[{tooltipText}],ret)=>{if(tooltipText.indexOf(Messages.USER_SETTINGS)< -1)return ret;const tooltip=ret.children;ret.children=props=>{const rendered=tooltip.apply(null,props);try{rendered?.props?.children?.push()}catch(error){updater_Logger.error("Error in PanelButton patch:",error)}return tooltip}})}}\n;// CONCATENATED MODULE: ./src/renderer/ui/components/versiontag.tsx\nconst root=PCCompatNative.getBasePath();const kernelPath=node_path.resolve(root,"..","..");const info={currentCommit:"Loading...",currentBranch:"HEAD",kernelCommit:"Loading...",kernelBranch:"HEAD"};Promise.all([Git.getLatestCommit(root),Git.getBranchName(root),Git.getLatestCommit(kernelPath),Git.getBranchName(kernelPath)]).then(([{short:pcCommit},pcBranch,{short:kernelCommit},kernelBranch])=>{Object.assign(info,{currentCommit:pcCommit,currentBranch:pcBranch,kernelCommit,kernelBranch})}).catch(()=>{});Git.getLatestCommit(root).then(args=>{info.currentCommit=args.short});const renderElement=function(contents){const{Text}=discord;return React.createElement(Text,{size:Text.Sizes.SIZE_12,color:Text.Colors.MUTED,className:"pc-version-tag"},contents)};function VersionTag({kernel}){const{currentCommit,currentBranch,kernelBranch,kernelCommit}=info;return React.createElement(React.Fragment,null,renderElement(`Powercord ${currentBranch} (${currentCommit})`),kernel&&kernelBranch!=null&&kernelCommit!=null&&renderElement(`Kernel ${kernelBranch} (${kernelCommit})`))}\n;// CONCATENATED MODULE: ./src/renderer/modules/devserver.ts\nconst devserver_Logger=new logger("DevServer");const DevServer=new class DevServer1{close(){if(!this._ws)return;devserver_Logger.log("DevServer","Closing WebSocket");this._ws=null}initialize(){const win=window;if(win.PCDevServer&&win.PCDevServer.ws!=null){devserver_Logger.log("Taking over socket");this._ws=win.PCDevServer.ws}else{devserver_Logger.log("Loading development server...");this._ws=new WebSocket("ws://localhost:5858")}win.PCDevServer=DevServer1;this._ws.onmessage=this.handleMessage;this._ws.onerror=error=>{devserver_Logger.error("DevServer","Fatal error:",error)};this._ws.onclose=()=>{this._ws=null;devserver_Logger.error("Connection closed...")}}send(operation,data){if(!this._ws)throw"Tried sending message without connection established";this._ws.send(JSON.stringify({operation:operation,data:data}))}reloadCore(){const path=window.require("path");const fs=window.require("fs");devserver_Logger.log("Reloading core...");events.dispatchEvent(new Event("reload-core"));const content=fs.readFileSync(path.join(PCCompatNative.getBasePath(),"dist","renderer.js"),"utf8");const script=document.head.appendChild(Object.assign(document.createElement("script"),{type:"module",textContent:content+";__webpack_exports__default.start();",onload:()=>script.remove()}))}reloadStyles(){events.dispatchEvent(new Event("reload-css"))}reload(type){switch(type){case"core":{this.reloadCore()}break;case"styles":{this.reloadStyles()}break;case"backend":{window.DiscordNative.app.relaunch()}break}}constructor(){this._ws=null;this.handleMessage=({data})=>{const message=testJSON(data);if(!message)return devserver_Logger.error("Unable to parse message:",data);switch(message.operation){case"HELLO":{this.send("HELLO",{client:`Discord->${window.DiscordNative.app.getReleaseChannel()}`});devserver_Logger.log("WS Connected")}break;case"RELOAD_STYLES":{this.reloadStyles()}break;case"RELOAD_CORE":{this.reloadCore()}break;default:{devserver_Logger.log("Unknown operation:",message.operation)}}}}};/* harmony default export */ const devserver = ((/* unused pure expression or super */ null && (DevServer)));\n;// CONCATENATED MODULE: ./src/renderer/index.ts\nconst renderer_Logger=logger.create("Core");/* harmony default export */ const renderer = (new class PCCompat{start(){renderer_Logger.log("Loading");promise.then(this.onStart.bind(this))}async onStart(){StyleManager.initialize();this.expose("powercord",node_require("powercord"));this.expose("PCInternals",renderer_modules_namespaceObject);await init();powercord.api.commands.initialize();Object.defineProperty(window,"powercord_require",{value:node_require,configurable:false,writable:false});DOM.injectCSS("core",node_require(node_path.resolve(PCCompatNative.getBasePath(),"dist","style.css")));DOM.injectCSS("font-awesome",FONTAWESOME_BASEURL,{type:"URL",documentHead:true});modules_settings.patchSettingsView();QuickCSS.initialize();Updater.initialize();PluginManager.initialize();if(false){}this.checkForChangelog();this.patchSettingsHeader();this.patchVersionTag();events.addEventListener("reload-core",()=>{DOM.clearCSS("core");DOM.clearCSS("font-awesome")})}expose(name,namespace){Object.defineProperty(window,name,{value:namespace,configurable:true,writable:true})}checkForChangelog(){const{latestUsedVersion}=datastore.tryLoadData("info",{latestUsedVersion:"0.0.0"});if(latestUsedVersion!==index_namespaceObject.i8){datastore.trySaveData("info",{latestUsedVersion:index_namespaceObject.i8});Modals.showChangeLog("PCCompat Changelog",index_namespaceObject.VI)}}async patchSettingsHeader(){const{Webpack,DiscordModules:{Button,Tooltips}}=renderer_modules_namespaceObject;const SettingsComponents=await Webpack.findLazy(Webpack.Filters.byProps("Header","Panel"));if(this.promises.cancelled)return;const cancel=Patcher.after("SettingsHeader",SettingsComponents.default,"Header",(_,[props1],ret)=>{if(props1.children!=="Powercord")return ret;ret.props.children=[ret.props.children,React.createElement(Tooltips.Tooltip,{text:"Changelog",position:"top"},props=>React.createElement(Button,{...props,look:Button.Looks.BLANK,size:Button.Sizes.NONE,className:"pc-changelog-button",onClick:()=>{Modals.showChangeLog("PCCompat Changelog",index_namespaceObject.VI)},children:React.createElement(DiscordIcon,{name:"Info"})}))]});events.addEventListener("reload-core",()=>{cancel()})}async patchVersionTag(){const ClientDebugInfo=await webpack.findLazy(webpack.Filters.byDisplayName("ClientDebugInfo",true));const cancel=Patcher.after("DebugInfo",ClientDebugInfo,"default",(_,[props],res)=>{const childs=res.props.children;if(!Array.isArray(childs))return res;childs.push(React.createElement(VersionTag,{kernel:!props.hasKernelTag}));props.hasKernelTag??=true});events.addEventListener("reload-core",()=>{cancel()})}stop(){}constructor(){this.promises={cancelled:false,cancel(){this.cancelled=true}}}});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///475\n')}},__webpack_require__={d:(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),r:Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__[475](0,__webpack_exports__,__webpack_require__);var __webpack_exports__default=__webpack_exports__.Z;export{__webpack_exports__default as default};